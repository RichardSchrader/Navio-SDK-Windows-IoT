<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emlid.WindowsIot.Hardware</name>
    </assembly>
    <members>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.INavioFramDevice">
            <summary>
            Navio FRAM device interface.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioFramDevice.Size">
            <summary>
            Size of memory in bytes.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.INavioFramDevice.ReadByte">
            <summary>
            Reads a single byte at the "current address" (next byte after the last operation).
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.INavioFramDevice.ReadPage(System.Int32)">
            <summary>
            Reads a single byte at the "current address" (next byte after the last operation).
            </summary>
            <param name="length">Length of page to read in bytes.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.INavioFramDevice.ReadByte(System.Int32)">
            <summary>
            Reads a single byte "randomly" at the specified address.
            </summary>
            <param name="address">Address at which to read.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.INavioFramDevice.ReadPage(System.Int32,System.Int32)">
            <summary>
            Reads a "page" of bytes "sequentially" starting at the specified address.
            </summary>
            <param name="address">Address at which to read.</param>
            <param name="length">Length of page to read in bytes.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.INavioFramDevice.WriteByte(System.Int32,System.Byte)">
            <summary>
            Writes a single byte at the specified address.
            </summary>
            <param name="address">Address at which to write.</param>
            <param name="data">Source data buffer to write from.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.INavioFramDevice.WritePage(System.Int32,System.Byte[])">
            <summary>
            Writes a "page" of multiple bytes starting at the specified address.
            </summary>
            <param name="address">Address at which to write.</param>
            <param name="data">Source data buffer to write from.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.INavioFramDevice.WritePage(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a "page" of multiple bytes starting at the specified address.
            </summary>
            <param name="address">Address at which to write.</param>
            <param name="data">Source data buffer to write from.</param>
            <param name="offset">Offset in the source buffer at which to start reading data to write.</param>
            <param name="length">Length of page to write in bytes.</param>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBoard">
            <summary>
            Common hardware interface to all Navio devices.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBoard.Model">
            <summary>
            Hardware model.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBoard.Adc">
            <summary>
            ADC device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBoard.Barometer">
            <summary>
            Barometer device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBoard.Fram">
            <summary>
            FRAM device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBoard.Gps">
            <summary>
            GPS device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBoard.Imu1">
            <summary>
            Primary IMU device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBoard.Imu2">
            <summary>
            Secondary IMU device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBoard.Led">
            <summary>
            LED device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBoard.Pwm">
            <summary>
            PWM device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBoard.RCInput">
            <summary>
            RC input device.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBarometerDevice">
            <summary>
            Navio barometer device interface.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBarometerDevice.Measurement">
            <summary>
            Last measurement taken from the device.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBarometerDevice.Reset">
            <summary>
            Resets the device and clears current measurements.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBarometerDevice.Update">
            <summary>
            Performs calculation on the device then fires the <see cref="E:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBarometerDevice.MeasurementUpdated"/> event.
            </summary>
        </member>
        <member name="E:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBarometerDevice.MeasurementUpdated">
            <summary>
            Fired after a new measurement is calculated.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.INavioAdcDevice">
            <summary>
            Navio ADC device interface.
            </summary>
            <remarks>
            Navio models have different ADC circuits and counts. This interface provides a hardware
            model agnostic way to communicate with each ADC connector.
            </remarks>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.INavioImuDevice">
            <summary>
            Navio GPS device interface.
            </summary>
            <remarks>
            Navio models have different IMU chips and counts. This interface provides a hardware
            model agnostic way to communicate with each IMU.
            </remarks>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.INavioGpsDevice">
            <summary>
            Navio GPS device interface.
            </summary>
            <remarks>
            Navio models have different GPS chips. This interface provides a hardware
            model agnostic way to communicate with the GPS.
            </remarks>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice">
            <summary>
            Navio RGB LED device interface.
            </summary>
            <remarks>
            Different Navio models support varying color ranges. This interface provides a hardware
            model agnostic way to control the LED color and determine the color range.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.CanDisable">
            <summary>
            Indicates whether the LED can be disabled, i.e. must be enabled before it will show color.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.Enabled">
            <summary>
            Enables or disables the LED when possible.
            </summary>
            <remarks>
            Do not try to set false when <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.CanDisable"/> is not true.
            </remarks>
            <exception cref="T:System.NotSupportedException">Thrown when attempting to set the value to disabled when it is not supported.</exception>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.MaximumValue">
            <summary>
            Maximum value of any color component.
            </summary>
            <remarks>
            The color range is calculated as <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.MaximumValue"/> + 1 ^3.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.Red">
            <summary>
            Intensity of the red LED component.
            </summary>
            <remarks>
            Value in the range 0-<see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.MaximumValue"/>.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.Green">
            <summary>
            Intensity of the green LED component.
            </summary>
            <remarks>
            Value in the range 0-<see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.MaximumValue"/>.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.Blue">
            <summary>
            Intensity of the green LED component.
            </summary>
            <remarks>
            Value in the range 0-<see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.MaximumValue"/>.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.Reset">
            <summary>
            Clears all values and resets the device state to default (disabled).
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.Read">
            <summary>
            Reads the LED values from the device then updates the related properties.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.SetRgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the LED <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.Red"/>, <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.Green"/> and <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.Blue"/> values together (in one operation).
            </summary>
            <param name="red">Red value in the range 0-<see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.MaximumValue"/>.</param>
            <param name="green">Green value in the range 0-<see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.MaximumValue"/>.</param>
            <param name="blue">Blue value in the range 0-<see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.MaximumValue"/>.</param>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.INavioRCInputDevice">
            <summary>
            Navio RC input device.
            </summary>
            <remarks>
            <para>
            Difference Navio models use different methods for RC input. This interface provides a hardware
            model agnostic way to control the RC input and supported protocols.
            </para>
            <para>
            Navio and Navio Plus use a GPIO pin which requires software PPM conversion, consuming
            significant processor resources and introducing latencies and inaccuracies. Additionally
            it is not feasible to support any other protocols than CPPM because alternative
            protocols such as SBUS usually require a much faster cycle detection rate.
            </para>
            <para>
            Navio 2 uses an STM32 co-processor for "hardware" (microprocessor firmware) RC input
            with multiple protocols including CPPM and SBUS.
            </para>
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioRCInputDevice.Channels">
            <summary>
            PPM channel values.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioRCInputDevice.Multiprotocol">
            <summary>
            Indicates multiple protocols are supported, otherwise only CPPM is possible.
            </summary>
        </member>
        <member name="E:Emlid.WindowsIot.Hardware.Boards.Navio.INavioRCInputDevice.ChannelsChanged">
            <summary>
            Fired after a new frame of data has been received and decoded into <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioRCInputDevice.Channels"/>.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice">
            <summary>
            Navio PWM output device.
            </summary>
            <remarks>
            <para>
            Difference Navio models use different methods for PWM output. This interface provides a hardware
            model agnostic way to control the PWM output and detect the channel capabilities.
            </para>
            <para>
            Navio and Navio Plus use a PCA9685 hardware PWM chip which is limited to a single frequency
            and loses 3 of the 16 possible outputs by connecting to the RGB LED, although gaining
            hardware PWM for the LED (68 million colors).
            </para>
            <para>
            Navio 2 uses an STM32 co-processor for "hardware" (microprocessor firmware) PWM output of
            up to 14 channels, but loses fidelity of the RGB LED (only 16 colors) because that
            is then connected to GPIO pins.
            </para>
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.CanDisable">
            <summary>
            Indicates whether PWM can be disabled, i.e. must be enabled before it will generate output.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.Enabled">
            <summary>
            Enables or disables PWM when possible.
            </summary>
            <remarks>
            Do not try to set false when <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.CanDisable"/> is not true.
            </remarks>
            <exception cref="T:System.NotSupportedException">Thrown when attempting to set the value to disabled when it is not supported.</exception>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.FrequencyPerChannel">
            <summary>
            Indicates a different frequency can be set for each channel.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.Frequency">
            <summary>
            Frequency for all channels in Hz.
            </summary>
            <remarks>
            <para>
            When <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.FrequencyPerChannel"/> is true, reading this value returns the highest of all frequencies
            and writing it sets all channels to the same frequency.
            When <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.FrequencyPerChannel"/> is false, the device does not support multiple frequencies so
            all values are tied together.
            </para>
            <para>
            When setting the frequency, the device clock and oscillator characteristics may cause the resulting
            frequency to be different to what was set. Read back the value after setting to get the actual value.
            </para>
            <para>
            Some PWM devices do not tolerate high values and could be damaged if this is set too high,
            e.g. analog servos operate at much lower frequencies than digital servos.
            See <see cref="F:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.ServoSafeFrequency"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.FrequencyMinimum">
            <summary>
            Minimum frequency supported in Hz.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.FrequencyMaximum">
            <summary>
            Maximum frequency supported in Hz.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.WidthMinimum">
            <summary>
            Minimum pulse width in fractions of milliseconds, based on the current <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.Frequency"/>.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.WidthMaximum">
            <summary>
            Maximum pulse width in fractions of milliseconds, based on the current <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.Frequency"/>.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.Channels">
            <summary>
            PWM channel pulse widths in milliseconds.
            </summary>
            <remarks>
            The <see cref="P:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.Frequency"/> can only be changed when the device supports independent
            frequencies per channel, i.e. <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.FrequencyPerChannel"/> is true.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.Reset">
            <summary>
            Clears all values and resets the device state to default (disabled).
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.Read">
            <summary>
            Reads the PWM channels from the device then updates the related properties.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.SetChannel(System.Int32,Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse)">
            <summary>
            Sets a single channel value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.SetChannels(System.Int32,System.Collections.Generic.IList{Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse},System.Int32)">
            <summary>
            Sets multiple channel values at once.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board">
            <summary>
            Navio (first model) hardware board.
            </summary>
            <remarks>
            Encapsulates common initialization and access to all components on this hardware model.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.#ctor">
            <summary>
            Creates an instance.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.Dispose(System.Boolean)">
            <summary>
            Frees resources owned by this instance.
            </summary>
            <param name="disposing">
            True when called via <see cref="M:System.IDisposable.Dispose"/>, false when called from the finalizer.
            </param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board._barometerDevice">
            <summary>
            Model specific MS5611 chip which provides <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.Barometer"/> functionality.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board._framDevice">
            <summary>
            Model specific MB85RC04V chip which provides <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.Fram"/> functionality.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board._ledPwmDevice">
            <summary>
            Model specific PCA9685 chip which provides <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.Led"/> and <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.Pwm"/> functionality.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board._rcInputDevice">
            <summary>
            Model specific GPIO software PWM decoding, providing the <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.RCInput"/> functionality.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.Model">
            <summary>
            Hardware model.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.Adc">
            <summary>
            ADC device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.Barometer">
            <summary>
            Barometric pressure and temperature sensor.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.Fram">
            <summary>
            Ferroelectric RAM device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.Gps">
            <summary>
            GPS device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.Imu1">
            <summary>
            Primary IMU device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.Imu2">
            <summary>
            Secondary IMU device is always null because the Navio only has one IMU.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.Led">
            <summary>
            LED device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.Pwm">
            <summary>
            PWM device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1Board.RCInput">
            <summary>
            RC input device.
            </summary>
            <remarks>
            Not really hardware; only software PWM decoding over a GPIO pin on Navio and Navio boards.
            Latencies and inaccuracies possible due to software overhead.
            </remarks>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice">
            <summary>
            Navio 2 Remote Control Input Output (RCIO) hardware device.
            </summary>
            <remarks>
            Navio 2 provides ADC, RC (receiver) input SBUS and CPPM decoding, and RC PWM output via
            firmware running on an ARM co-processor connected to via the Raspberry Pi auxiliary SPI bus.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice.SpiBusNumber">
            <summary>
            SPI bus controller number, zero based.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice.SpiChipSelectLine">
            <summary>
            SPI Chip Select Line (CSL) number.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice.SpiFrequency">
            <summary>
            SPI speed in Hz.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice.SpiBitsPerWord">
            <summary>
            SPI bits per word.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice.SpiOperationMode">
            <summary>
            SPI operation mode.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice.RcInputChannelsMaximum">
            <summary>
            Maximum number of RC input channels.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice.GpioBusNumber">
            <summary>
            GPIO bus controller number, zero based.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice.GpioInterruptPinNumber">
            <summary>
            GPIO pin for the RCIO "PC11" interrupt pin.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice.GpioSwdClockPinNumber">
            <summary>
            GPIO pin for the RCIO SWD_CLK pin.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice.GpioSwdIoPinNumber">
            <summary>
            GPIO pin for the RCIO SWD_IO pin.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice.#ctor">
            <summary>
            Creates and initializes an instance.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice.Dispose(System.Boolean)">
            <summary>
            Frees resources owned by this instance.
            </summary>
            <param name="disposing">
            True when called via <see cref="M:System.IDisposable.Dispose"/>, false when called from the finalizer.
            </param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice._chip">
            <summary>
            SPI connection to the RCIO co-processor.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice._interruptPin">
            <summary>
            RCIO GPIO interrupt pin.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice._swdPort">
            <summary>
            RCIO Serial Wire Debug GPIO port.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioRCInputDevice#Channels">
            <summary>
            Channel values in microseconds.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioRCInputDevice#Multiprotocol">
            <summary>
            Returns false because multiple protocols are not supported, only CPPM.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice.OnInterruptPinValueChanged(Windows.Devices.Gpio.GpioPin,Windows.Devices.Gpio.GpioPinValueChangedEventArgs)">
            <summary>
            Updates RCIO register values when it fires the interrupt.
            </summary>
        </member>
        <member name="E:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2RcioDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioRCInputDevice#ChannelsChanged">
            <summary>
            Fired after a new frame of data has been received and decoded into <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioRCInputDevice.Channels"/>.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board">
            <summary>
            Navio 2 hardware board.
            </summary>
            <remarks>
            Encapsulates common initialization and access to all components on this hardware model.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board.#ctor">
            <summary>
            Creates an instance.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board.Dispose(System.Boolean)">
            <summary>
            Frees resources owned by this instance.
            </summary>
            <param name="disposing">
            True when called via <see cref="M:System.IDisposable.Dispose"/>, false when called from the finalizer.
            </param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board._barometerDevice">
            <summary>
            MS5611 chip which provides <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board.Barometer"/> functionality.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board._ledDevice">
            <summary>
            LED chip with RGB components connected to GPIO pins.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board._rcioDevice">
            <summary>
            RCIO co-processor which acts as a proxy to the two IMUs, RC input and output.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board.Model">
            <summary>
            Hardware model.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board.Adc">
            <summary>
            ADC device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board.Barometer">
            <summary>
            Barometric pressure and temperature sensor.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board.Fram">
            <summary>
            Ferroelectric RAM device.
            </summary>
            <remarks>
            No FRAM is available on Navio 2, returns null.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board.Gps">
            <summary>
            GPS device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board.Imu1">
            <summary>
            Primary IMU device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board.Imu2">
            <summary>
            Secondary IMU device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board.Led">
            <summary>
            LED device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board.Pwm">
            <summary>
            PWM device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2Board.RCInput">
            <summary>
            RC input device.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard">
            <summary>
            Navio+ hardware board.
            </summary>
            <remarks>
            Encapsulates common initialization and access to all components on this hardware model.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.#ctor">
            <summary>
            Creates an instance.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.Dispose(System.Boolean)">
            <summary>
            Frees resources owned by this instance.
            </summary>
            <param name="disposing">
            True when called via <see cref="M:System.IDisposable.Dispose"/>, false when called from the finalizer.
            </param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard._barometerDevice">
            <summary>
            Model specific MS5611 chip which provides <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.Barometer"/> functionality.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard._framDevice">
            <summary>
            Model specific MB85RC256V chip which provides <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.Fram"/> functionality.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard._ledPwmDevice">
            <summary>
            Model specific PCA9685 chip which provides <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.Led"/> and <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.Pwm"/> functionality.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard._rcInputDevice">
            <summary>
            Model specific GPIO software PWM decoding, providing the <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.RCInput"/> functionality.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.Model">
            <summary>
            Hardware model.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.Adc">
            <summary>
            ADC device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.Barometer">
            <summary>
            Barometric pressure and temperature sensor.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.Fram">
            <summary>
            Ferroelectric RAM device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.Gps">
            <summary>
            GPS device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.Imu1">
            <summary>
            Primary IMU device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.Imu2">
            <summary>
            Secondary IMU device is always null because the Navio+ only has one IMU.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.Led">
            <summary>
            LED device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.Pwm">
            <summary>
            PWM device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1PlusBoard.RCInput">
            <summary>
            RC input device.
            </summary>
            <remarks>
            Not really hardware; only software PWM decoding over a GPIO pin on Navio and Navio boards.
            Latencies and inaccuracies possible due to software overhead.
            </remarks>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice">
            <summary>
            Navio 2 LED device, three GPIO pins for RGB components of an LED.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.GpioControllerIndex">
            <summary>
            GPIO controller index for the LED pins on the Navio board.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.RedGpioPin">
            <summary>
            GPIO pin number of the red LED component.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.GreenGpioPin">
            <summary>
            GPIO pin number of the green LED component.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.BlueGpioPin">
            <summary>
            GPIO pin number of the blue LED component.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.#ctor">
            <summary>
            Creates an instance and read current values.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.Dispose(System.Boolean)">
            <summary>
            Frees resources owned by this instance.
            </summary>
            <param name="disposing">
            True when called via <see cref="M:System.IDisposable.Dispose"/>, false when called via finalizer.
            </param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice._lock">
            <summary>
            Thread synchronization.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice._redPin">
            <summary>
            LED red component GPIO pin.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice._greenPin">
            <summary>
            LED green component GPIO pin.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice._bluePin">
            <summary>
            LED blue component GPIO pin.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.CanDisable">
            <summary>
            Returns true because even though the Navio 2 GPIO based LED has no controller to disable,
            we simulate the disabled state by setting all pins high (black = off) without updating
            the local RGB values, so they are restored when enabled.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.Enabled">
            <summary>
            Simulates enabling or disabling the LED by setting it to black (RGB components all off).
            The Navio 2 GPIO based LED has no controller to disable.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.MaximumValue">
            <summary>
            Returns 1 because the Navio 2 GPIO based LED can has no hardware PWM capability
            so can only be switched on (1) or off (0).
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.Red">
            <summary>
            Gets or sets the red LED component (1 = on, 0 = off).
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.Green">
            <summary>
            Gets or sets the green LED component (1 = on, 0 = off).
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.Blue">
            <summary>
            Gets or sets the blue LED component (1 = on, 0 = off).
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.ConvertToGpioValue(System.Int32)">
            <summary>
            Returns the GPIO pin value for an LED component value.
            </summary>
            <param name="value">LED component value.</param>
            <returns>GPIO pin value.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.ConvertToLedValue(Windows.Devices.Gpio.GpioPinEdge)">
            <summary>
            Returns the LED component value for a GPIO change event edge.
            </summary>
            <param name="edge">GPIO event edge.</param>
            <returns>LED component value.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.ConvertToLedValue(Windows.Devices.Gpio.GpioPinValue)">
            <summary>
            Returns the LED component value for a GPIO pin value.
            </summary>
            <param name="value">GPIO pin value.</param>
            <returns>LED component value.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.Reset">
            <summary>
            Clears all values.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.Read">
            <summary>
            Reads the LED values from the device then updates the related properties.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.SetRgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the LED <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.Red"/>, <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.Green"/> and <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.Blue"/> values together (in one operation).
            </summary>
            <param name="red">Red value in the range 0-<see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.MaximumValue"/>.</param>
            <param name="green">Green value in the range 0-<see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.MaximumValue"/>.</param>
            <param name="blue">Blue value in the range 0-<see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio2LedDevice.MaximumValue"/>.</param>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.NavioBarometerDevice">
            <summary>
            Navio barometric pressure and temperature sensor (MS5611 hardware device), connected via I2C.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.NavioBarometerDevice.I2cControllerIndex">
            <summary>
            I2C controller index of the chip on the Navio board.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.NavioBarometerDevice.ChipSelectBit">
            <summary>
            Chip Select Bit (CSB) of the MS5611 on the Navio board.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.NavioBarometerDevice.DefaultOsr">
            <summary>
            Over-Sampling Rate to use by default (maximum of 4096).
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.NavioBarometerDevice.#ctor">
            <summary>
            Creates an instance without any initialization.
            </summary>
            <remarks>
            It is necessary to call the <see cref="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Reset"/> and <see cref="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Update"/>
            before any pressure or temperature data can be read.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.NavioBarometerDevice.Dispose(System.Boolean)">
            <summary>
            Frees resources owned by this instance.
            </summary>
            <param name="disposing">
            True when called via <see cref="M:System.IDisposable.Dispose"/>, false when called from the finalizer.
            </param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.NavioBarometerDevice._lock">
            <summary>
            Thread synchronization.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.NavioBarometerDevice._device">
            <summary>
            Barometer device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.NavioBarometerDevice.Measurement">
            <summary>
            Last measurement taken from the device.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.NavioBarometerDevice.Reset">
            <summary>
            Resets the device and clears current measurements.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.NavioBarometerDevice.Update">
            <summary>
            Performs calculation on the device then fires the <see cref="E:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.NavioBarometerDevice.MeasurementUpdated"/> event.
            </summary>
        </member>
        <member name="E:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.NavioBarometerDevice.MeasurementUpdated">
            <summary>
            Fired after a new measurement is calculated.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice">
            <summary>
            Navio FRAM (MB85RC256V or MB85RC04V hardware device), connected via I2C.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice.I2cControllerIndex">
            <summary>
            I2C controller index of the chip on the Navio board.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice.ChipNumber">
            <summary>
            MB85RC#V chip number (device address code).
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice.Navio1DeviceId">
            <summary>
            FRAM device ID on the Navio.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice.Navio1PlusDeviceId">
            <summary>
            FRAM device ID on the Navio+.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice.#ctor(Emlid.WindowsIot.Hardware.Boards.Navio.NavioHardwareModel)">
            <summary>
            Creates an instance of the correct type depending on the Navio model.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice.Dispose(System.Boolean)">
            <summary>
            Frees resources owned by this instance.
            </summary>
            <param name="disposing">
            True when called via <see cref="M:System.IDisposable.Dispose"/>, false when called from the finalizer.
            </param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice._lock">
            <summary>
            Thread synchronization.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice._device">
            <summary>
            FRAM device specific to the requested Navio model.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice.Size">
            <summary>
            Size of memory in bytes.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice.ReadByte">
            <summary>
            Reads a single byte at the "current address" (next byte after the last operation).
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice.ReadPage(System.Int32)">
            <summary>
            Reads a single byte at the "current address" (next byte after the last operation).
            </summary>
            <param name="length">Length of page to read in bytes.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice.ReadByte(System.Int32)">
            <summary>
            Reads a single byte "randomly" at the specified address.
            </summary>
            <param name="address">Address at which to read.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice.ReadPage(System.Int32,System.Int32)">
            <summary>
            Reads a "page" of bytes "sequentially" starting at the specified address.
            </summary>
            <param name="address">Address at which to read.</param>
            <param name="length">Length of page to read in bytes.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice.WriteByte(System.Int32,System.Byte)">
            <summary>
            Writes a single byte at the specified address.
            </summary>
            <param name="address">Address at which to write.</param>
            <param name="data">Source data buffer to write from.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice.WritePage(System.Int32,System.Byte[])">
            <summary>
            Writes a "page" of multiple bytes starting at the specified address.
            </summary>
            <param name="address">Address at which to write.</param>
            <param name="data">Source data buffer to write from.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1FramDevice.WritePage(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a "page" of multiple bytes starting at the specified address.
            </summary>
            <param name="address">Address at which to write.</param>
            <param name="data">Source data buffer to write from.</param>
            <param name="offset">Offset in the source buffer at which to start reading data to write.</param>
            <param name="length">Length of page to write in bytes.</param>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice">
            <summary>
            Navio and Navio+ LED &amp; PWM servo device, a PCA9685 chip connected via I2C.
            </summary>
            <remarks>
            Navio uses the <see cref="T:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device"/> as a dual-purpose PWM and LED driver,
            i.e. for servo control and the high intensity RGB status LED. It is connected via the I2C bus.
            See http://docs.emlid.com/Navio-dev/servo-and-rgb-led/ for more information.
            <seealso cref="T:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device"/>
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.I2cControllerIndex">
            <summary>
            I2C controller index of the chip on the Navio board.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.ChipNumber">
            <summary>
            Chip number on the Navio board.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.GpioControllerIndex">
            <summary>
            GPIO controller index of the <see cref="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.OutputEnableGpioPin"/> on the Navio board.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.OutputEnableGpioPin">
            <summary>
            Raspberry Pi GPIO pin which enables PCA output.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.ExternalClockSpeed">
            <summary>
            External clock speed in Hz generated from an TCXO oscillator.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.LedRedChannelIndex">
            <summary>
            I2C channel index of the red value in the high intensity RGB LED.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.LedGreenChannelIndex">
            <summary>
            I2C channel index of the green value in the high intensity RGB LED.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.LedBlueChannelIndex">
            <summary>
            I2C channel index of the blue value in the high intensity RGB LED.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.PwmChannelIndex">
            <summary>
            I2C channel index of the first PWM channel.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.PwmChannelCount">
            <summary>
            Number of PWM channels.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.#ctor">
            <summary>
            Creates an instance and reads current values.
            </summary>
            <remarks>
            <para>
            The required mode bits are set, but the device state and PWM values unchanged (supporting recovery).
            Initializing without restart allows the caller decide whether to recover or reset the device.
            Before starting any output be sure to check the <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.Frequency"/>.
            </para>
            <para>
            To start with new settings, call <see cref="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Reset"/> then set <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Enabled"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Dispose(System.Boolean)">
            <summary>
            Frees resources owned by this instance.
            </summary>
            <param name="disposing">
            True when called via <see cref="M:System.IDisposable.Dispose"/>, false when called from the finalizer.
            </param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice._lock">
            <summary>
            Thread synchronization.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice._device">
            <summary>
            LED/PWM device.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice._enablePin">
            <summary>
            GPIO pin which enables PWM output.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Led">
            <summary>
            LED interface.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Pwm">
            <summary>
            PWM interface.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.CanDisable">
            <summary>
            Indicates whether the device can be disabled, i.e. must be enabled before it will generate output.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Enabled">
            <summary>
            Controls output by driving the <see cref="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.OutputEnableGpioPin"/>
            low (enabled) or high (disabled).
            </summary>
            <remarks>
            It's extremely important to set the frequency to a known value before starting output.
            Use <see cref="F:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.ServoSafeFrequency"/> for most analog servos. Digital servos support
            much faster update speeds, so if you have one read their specification and choose a
            sensible value (perhaps not maximum) for best performance without overheating.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Reset">
            <summary>
            Clears all values and resets the device state to default (disabled).
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Read">
            <summary>
            Reads the LED &amp; PWM channels from the device then updates the related properties.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioLedDevice#MaximumValue">
            <summary>
            Maximum value of any color component.
            </summary>
            <remarks>
            The color range is calculated as <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.MaximumValue"/> + 1 ^3.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioLedDevice#Red">
            <summary>
            Intensity of the red LED component.
            </summary>
            <remarks>
            Value in the range 0-<see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.MaximumValue"/>.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioLedDevice#Green">
            <summary>
            Intensity of the green LED component.
            </summary>
            <remarks>
            Value in the range 0-<see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.MaximumValue"/>.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioLedDevice#Blue">
            <summary>
            Intensity of the green LED component.
            </summary>
            <remarks>
            Value in the range 0-<see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.MaximumValue"/>.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioLedDevice#Reset">
            <summary>
            Clears all LED values.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioLedDevice#Read">
            <summary>
            Reads the LED values from the device then updates the related properties.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioLedDevice#SetRgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the LED <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.Red"/>, <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.Green"/> and
            <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.Blue"/> values together (in one operation).
            </summary>
            <param name="red">Red value in the range 0-<see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.MaximumValue"/>.</param>
            <param name="green">Green value in the range 0-<see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.MaximumValue"/>.</param>
            <param name="blue">Blue value in the range 0-<see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioLedDevice.MaximumValue"/>.</param>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioPwmDevice#Frequency">
            <summary>
            Frequency for all channels in Hz.
            </summary>
            <remarks>
            <para>
            When <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.FrequencyPerChannel"/> is true, reading this value returns the highest of all frequencies
            and writing it sets all channels to the same frequency.
            When <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.FrequencyPerChannel"/> is false, the device does not support multiple frequencies so
            all values are tied together.
            </para>
            <para>
            When setting the frequency, the device clock and oscillator characteristics may cause the resulting
            frequency to be different to what was set. Read back the value after setting to get the actual value.
            </para>
            <para>
            Some PWM devices do not tolerate high values and could be damaged if this is set too high,
            e.g. analog servos operate at much lower frequencies than digital servos.
            See <see cref="F:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.ServoSafeFrequency"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioPwmDevice#FrequencyPerChannel">
            <summary>
            Indicates whether the frequency can be controlled individually for each channel.
            </summary>
            <remarks>
            <para>
            When true, the <see cref="P:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.Frequency"/> of each <see cref="T:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse"/> in <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.Channels"/>
            can be used to change the frequency of individual channels. The <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.Frequency"/> can still be
            used to set all channel frequencies at once, or get the highest frequency of all channels.
            </para>
            <para>
            When false, only the <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.Frequency"/> value can be used
            and any attempt to change the frequency of individual channels will throw an
            error.
            </para>
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioPwmDevice#FrequencyMinimum">
            <summary>
            Minimum frequency in Hz.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioPwmDevice#FrequencyMaximum">
            <summary>
            Maximum frequency in Hz.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioPwmDevice#WidthMinimum">
            <summary>
            Minimum pulse width in fractions of milliseconds, based on the current <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.Frequency"/>.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioPwmDevice#WidthMaximum">
            <summary>
            Maximum pulse width in fractions of milliseconds, based on the current <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.INavioPwmDevice.Frequency"/>.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioPwmDevice#Channels">
            <summary>
            PWM channels, used to get or set the PWM duty cycle or width.
            </summary>
            <remarks>
            The <see cref="P:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.Frequency"/> cannot be changed as this device does not
            support independent frequencies per channel.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioPwmDevice#Reset">
            <summary>
            Clears all PWM channel values.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioPwmDevice#Read">
            <summary>
            Reads the PWM channels from the device then updates the related properties.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioPwmDevice#SetChannel(System.Int32,Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse)">
            <summary>
            Sets a single channel value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1LedPwmDevice.Emlid#WindowsIot#Hardware#Boards#Navio#INavioPwmDevice#SetChannels(System.Int32,System.Collections.Generic.IList{Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse},System.Int32)">
            <summary>
            Sets multiple channel values at once.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice">
            <summary>
            Navio Remote Control input hardware device.
            </summary>
            <remarks>
            Navio provides RC (receiver) input via a connector on it's servo rail mapped to GPIO pin 4.
            Navio+ has a logic level converter and you can connect receivers which generate both 3.3V and 5V signals.
            The older Navio model only has a built-in voltage divider in PPM Input that lowers the voltage level from 5V to 3.3V.
            So if you connect a 3.3V PPM device (which is rare) to the original Navio, no signal will not be detected.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice.GpioControllerIndex">
            <summary>
            GPIO controller index of the chip on the Navio board.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice.GpioInputPinNumber">
            <summary>
            GPIO pin number which is mapped to the RC input connector.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice.#ctor">
            <summary>
            Creates and initializes an instance.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice.Dispose(System.Boolean)">
            <summary>
            Frees resources owned by this instance.
            </summary>
            <param name="disposing">
            True when called via <see cref="M:System.IDisposable.Dispose"/>, false when called from the finalizer.
            </param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice._inputPin">
            <summary>
            GPIO RC input pin.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice._decoder">
            <summary>
            Decoder called when each PPM cycle is detected.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice._decoderTask">
            <summary>
            Background decoder task.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice._receiverTask">
            <summary>
            Background receiver task.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice._stop">
            <summary>
            Cancellation token used to signal worker threads to stop.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice._pulseBuffer">
            <summary>
            Buffer containing raw PPM pulses.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice._pulseTrigger">
            <summary>
            Event used to signal the decoder that new captured PPM values are waiting to decode.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice._frameBuffer">
            <summary>
            Buffer containing decoded PPM frames.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice._frameTrigger">
            <summary>
            Event used to signal the consumer that new decoded PPM frames are ready to use.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice.Channels">
            <summary>
            Channel values in microseconds.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice.Multiprotocol">
            <summary>
            Returns false because multiple protocols are not supported, only CPPM.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice.OnInputPinValueChanged(Windows.Devices.Gpio.GpioPin,Windows.Devices.Gpio.GpioPinValueChangedEventArgs)">
            <summary>
            Handles GPIO changes (rising and falling PPM signal), recording them to the decoder queue.
            </summary>
            <param name="sender">Event source, the <see cref="T:Windows.Devices.Gpio.GpioPin"/> which changed.</param>
            <param name="arguments">Information about the GPIO pin value change.</param>
            <remarks>
            Main hardware routine which triggers the input translation process.
            This code must run as quickly as possible else we could miss the next event!
            </remarks>
        </member>
        <member name="E:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice.ChannelsChanged">
            <summary>
            Fired after a new frame of data has been received and decoded into <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice.Channels"/>.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice.Receiver">
            <summary>
            Waits for decoded frames, updates the <see cref="P:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice.Channels"/> property and fires
            the <see cref="E:Emlid.WindowsIot.Hardware.Boards.Navio.Internal.Navio1RCInputDevice.ChannelsChanged"/> event on a separate thread.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.NavioDeviceProvider">
            <summary>
            Hardware device provider for <see cref="T:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBoard"/> compatible boards.
            </summary>
            <remarks>
            Starting point from which consumers can gain access to all hardware devices
            without worrying about hardware detection or initialization.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.NavioDeviceProvider._lock">
            <summary>
            Thread synchronization.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.NavioDeviceProvider._board">
            <summary>
            Currently active board.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.NavioDeviceProvider.Detect">
            <summary>
            Attempts auto-detection of the currently installed Navio board.
            </summary>
            <returns>
            Navio hardware model when detected, or null when failed.
            </returns>
            <remarks>
            Returns the existing model once initialized (it would not be safe to detect with hardware already in use).
            As the EEPROM ID is not accessible in Windows IoT, the FRAM device is used as
            the next best and safe probe for the hardware model. It is different in all current versions.
            In Navio 2 it doesn't exist.
            In Navio+ it exists at one address.
            In the original Navio it exists with two addresses (less RAM with high and low address split).
            The detection logic is thus:
            1) See if the first FRAM address is available. No = Navio 2.
            2) See if the second FRAM address is available. Yes = Navio, No = Navio+.
            TODO: Perform an additional test to really detect a Navio 2.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.NavioDeviceProvider.Connect(Emlid.WindowsIot.Hardware.Boards.Navio.NavioHardwareModel)">
            <summary>
            Returns the current <see cref="T:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBoard"/> or creates it the first time.
            </summary>
            <param name="model">Hardware model.</param>
            <returns>Hardware interface for the requested model when successful.</returns>
            <remarks>
            The requested hardware model must be the same, otherwise any existing board
            is disposed and an attempt made to create a board of the new model.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Boards.Navio.NavioDeviceProvider.Connect">
            <summary>
            Returns the current <see cref="T:Emlid.WindowsIot.Hardware.Boards.Navio.INavioBoard"/> or performs hardware detection then creates it the first time.
            </summary>
            <returns>Hardware interface for the detected model when successful or null when none found.</returns>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Boards.Navio.NavioHardwareModel">
            <summary>
            Defines the specific hardware model of a Navio board.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.NavioHardwareModel.Navio1">
            <summary>
            First Navio version.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.NavioHardwareModel.Navio1Plus">
            <summary>
            Navio+ released in 2015.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Boards.Navio.NavioHardwareModel.Navio2">
            <summary>
            Navio2 released at the end of 2015-2016.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Config"/> page register data.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.RegisterCount">
            <summary>
            Number of registers on this page.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.#ctor(System.UInt16[])">
            <summary>
            Creates an instance from register values.
            </summary>
            <param name="data">Register values read from the device.</param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.ProtocolVersion">
            <summary>
            Protocol version.
            </summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Version"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.HardwareVersion">
            <summary>
            Hardware version.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.BootLoaderVersion">
            <summary>
            Boot loader version.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.TransferLimit">
            <summary>
            Maximum I2C transfer size.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.ControlCount">
            <summary>
            Maximum control count supported.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.ActuatorCount">
            <summary>
            Maximum actuator count supported.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.RCInputCount">
            <summary>
            Maximum RC input count supported.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.AdcInputCount">
            <summary>
            Maximum ADC input count supported.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.RelayAndControlGroupCount">
            <summary>
            number of relay outputs or control groups.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlGroupsValidFlags">
            <summary>
            Defines the flags in the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlRegisters.GroupsValid"/> register.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlGroupsValidFlags.Group0">
            <summary>
            Group 0 is valid / received.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlGroupsValidFlags.Group1">
            <summary>
            Group 1 is valid / received.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlGroupsValidFlags.Group2">
            <summary>
            Group 2 is valid / received.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlGroupsValidFlags.Group3">
            <summary>
            Group 3 is valid / received.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlRegisters">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Controls"/> page register data.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlRegisters.RegisterCount">
            <summary>
            Number of registers on this page.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlRegisters.ControlsMaximum">
            <summary>
            Maximum number of controls.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlRegisters.#ctor(System.UInt16[])">
            <summary>
            Creates an instance from register values.
            </summary>
            <param name="data">Register values read from the device.</param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlRegisters.Group0">
            <summary>
            Control group 0.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlRegisters.Group1">
            <summary>
            Control group 1.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlRegisters.Group2">
            <summary>
            Control group 2.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlRegisters.Group3">
            <summary>
            Control group 3.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlRegisters.GroupsValid">
            <summary>
            Group validation flags.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlRegisterOffset">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Controls"/> page register offsets.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlRegisterOffset.Group0">
            <summary>
            Control group 0.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlRegisterOffset.Group1">
            <summary>
            Control group 1.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlRegisterOffset.Group2">
            <summary>
            Control group 2.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlRegisterOffset.Group3">
            <summary>
            Control group 3.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioControlRegisterOffset.GroupsValid">
            <summary>
            Group validation flags.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigOptions">
            <summary>
            Defines the flags in the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisters.Options"/> register.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigOptions.Enabled">
            <summary>
            Enabled.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigOptions.Reverse">
            <summary>
            Reverse.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioTestRegisters">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Test"/> page register data.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioTestRegisters.RegisterCount">
            <summary>
            Number of registers on this page.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioTestRegisters.#ctor(System.UInt16[])">
            <summary>
            Creates an instance from register values.
            </summary>
            <param name="data">Register values read from the device.</param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioTestRegisters.Led">
            <summary>
            Sets the amber LED on/off.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioTestRegisterOffset">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Test"/> page register offsets.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioTestRegisterOffset.Led">
            <summary>
            Sets the amber LED on/off.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSensorRegisters">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Sensors"/> page register data.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSensorRegisters.RegisterCount">
            <summary>
            Number of registers on this page.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSensorRegisters.#ctor(System.UInt16[])">
            <summary>
            Creates an instance from register values.
            </summary>
            <param name="data">Register values read from the device.</param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSensorRegisters.Altitude">
            <summary>
            Altitude of an external sensor (HoTT or SBUS2).
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSensorRegisterOffset">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Sensors"/> page register offsets.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSensorRegisterOffset.Altitude">
            <summary>
            Altitude of an external sensor (HoTT or SBUS2).
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisters">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.RCConfig"/> page register data.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisters.RegisterCount">
            <summary>
            Number of registers on this page.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisters.AssignmentModeSwitchValue">
            <summary>
            Value for the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisters.Assignment"/> register to cause a mode switch.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisters.#ctor(System.UInt16[])">
            <summary>
            Creates an instance from register values.
            </summary>
            <param name="data">Register values read from the device.</param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisters.Minimum">
            <summary>
            Lowest input value.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisters.Center">
            <summary>
            Center input value.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisters.Maximum">
            <summary>
            Highest input value.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisters.DeadZone">
            <summary>
            Band around center that is ignored.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisters.Assignment">
            <summary>
            Mapped input value.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisters.Options">
            <summary>
            Channel options bitmask.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisters.Stride">
            <summary>
            Spacing between channel configuration data.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisterOffset">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.RCConfig"/> page register offsets.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisterOffset.Minimum">
            <summary>
            Lowest input value.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisterOffset.Center">
            <summary>
            Center input value.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisterOffset.Maximum">
            <summary>
            Highest input value.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisterOffset.DeadZone">
            <summary>
            Band around center that is ignored.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisterOffset.Assignment">
            <summary>
            Mapped input value.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisterOffset.Options">
            <summary>
            Channel options bitmask.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCConfigRegisterOffset.Stride">
            <summary>
            Spacing between channel configuration data.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRegisters">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.RCInput"/> page register data.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRegisters.RegisterCount">
            <summary>
            Number of registers on this page.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRegisters.#ctor(System.UInt16[])">
            <summary>
            Creates an instance from register values.
            </summary>
            <param name="data">Register values read from the device.</param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRegisters.Valid">
            <summary>
            Bitmask of valid controls.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRegisters.Controls">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.RCInputCount"/> controls from here.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRegisterOffset">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.RCInput"/> page register offsets.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRegisterOffset.Valid">
            <summary>
            Bitmask of valid controls.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRegisterOffset.ControlsStart">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.RCInputCount"/> controls from here.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisters">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.RCInputRaw"/> page register data.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisters.RegisterCount">
            <summary>
            Number of registers on this page.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisters.#ctor(System.UInt16[])">
            <summary>
            Creates an instance from register values.
            </summary>
            <param name="data">Register values read from the device.</param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisters.ChannelCount">
            <summary>
            Number of valid channels.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisters.Status">
            <summary>
            RC detail status flags.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisters.RssiNormal">
            <summary>
            Normalized RSSI value, 0: no reception, 255: perfect reception.
            </summary>
            <remarks>
            Hardware version 2 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisters.Data">
            <summary>
            Details about the RC source (PPM frame length, Spektrum protocol type).
            </summary>
            <remarks>
            Hardware versions 1 and 2.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisters.FrameCounter">
            <summary>
            Number of total received frames (wrapping counter).
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisters.FrameLostCounter">
            <summary>
            Number of total dropped frames (wrapping counter).
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisters.Channels">
            <summary>
            Channel data from here.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisterOffset">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.RCInputRaw"/> page register offsets.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisterOffset.ChannelCount">
            <summary>
            Number of valid channels.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisterOffset.StatusFlags">
            <summary>
            RC detail status flags.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisterOffset.RssiNormal">
            <summary>
            Normalized RSSI value, 0: no reception, 255: perfect reception.
            </summary>
            <remarks>
            Hardware version 2 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisterOffset.Data">
            <summary>
            Details about the RC source (PPM frame length, Spektrum protocol type).
            </summary>
            <remarks>
            Hardware versions 1 and 2.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisterOffset.FrameCounter">
            <summary>
            Number of total received frames (wrapping counter).
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisterOffset.FrameLostCounter">
            <summary>
            Number of total dropped frames (wrapping counter).
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisterOffset.ChannelsStart">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisterOffset.ChannelCount"/> channel data from here.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawStatusFlags">
            <summary>
            Defines the flags in the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawRegisters.Status"/> register.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawStatusFlags.FrameDropped">
            <summary>
            Single frame drop.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawStatusFlags.Failsafe">
            <summary>
            Receiver is in failsafe mode.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawStatusFlags.Dsm11">
            <summary>
            DSM decoding is 11 bit mode.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawStatusFlags.MappingOk">
            <summary>
            Channel mapping is okay.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioRCInputRawStatusFlags.ReceptionOk">
            <summary>
            RC reception okay.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupArmingFlags">
            <summary>
            Defines the flags in the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.Arming"/> register.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupArmingFlags.IOArmOk">
            <summary>
            OK to arm the IO side.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupArmingFlags.FmuArmed">
            <summary>
            FMU is already armed.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupArmingFlags.ManualOverrideOk">
            <summary>
            OK to switch to manual override via override RC channel.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupArmingFlags.FailsafeCustom">
            <summary>
            Use custom failsafe values, not 0 values of mixer.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupArmingFlags.InAirRestartOk">
            <summary>
            OK to try in-air restart.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupArmingFlags.PwmEnabledAtStartup">
            <summary>
            Output of PWM right after startup enabled to help ESCs initialize and prevent them from beeping.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupArmingFlags.RCHandlingDisabled">
            <summary>
            Disable the IO-internal evaluation of the RC.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupArmingFlags.ServosDisabled">
            <summary>
            If set, the system operates normally, but won't actuate any servos.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupArmingFlags.ForceFailsafe">
            <summary>
            If set, the system will always output the failsafe values.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupArmingFlags.FailsafePermanent">
            <summary>
            If set, the system will never return from a failsafe, but remain in failsafe once triggered.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupArmingFlags.OverrideImmediate">
            <summary>
            If set then on FMU failure override is immediate. Otherwise it waits for the mode switch to go past the override threshold.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupDsmBindState">
            <summary>
            Defines the flags in the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.DsmBindState"/> register.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupDsmBindState.PowerDown">
            <summary>
            Power down.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupDsmBindState.PowerUp">
            <summary>
            Power up.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupDsmBindState.SetReceiverOut">
            <summary>
            Set receiver out.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupDsmBindState.SendPulses">
            <summary>
            Send pulses.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupDsmBindState.ReinitializeUart">
            <summary>
            Re-initialize UART.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupFeatureFlags">
            <summary>
            Defines the flags in the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.Features"/> register.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupFeatureFlags.Sbus1Out">
            <summary>
            Enable S.Bus v1 output.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupFeatureFlags.Sbus2Out">
            <summary>
            Enable S.Bus v2 output.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupFeatureFlags.PwmRssi">
            <summary>
            Enable PWM RSSI parsing.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupFeatureFlags.AdcRssi">
            <summary>
            Enable ADC RSSI parsing.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Setup"/> page register data.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.RegisterCount">
            <summary>
            Number of registers on this page.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.RebootBootLoaderMagic">
            <summary>
            "Magic" (random) number required to activate the function of the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.RebootBootLoader"/> register.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.ForceSafetyOnMagic">
            <summary>
            "Magic" (random) number required to activate the function of the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.ForceSafetyOn"/> register.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.#ctor(System.UInt16[])">
            <summary>
            Creates an instance from register values.
            </summary>
            <param name="data">Register values read from the device.</param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.Features">
            <summary>
            Features.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.Arming">
            <summary>
            Arming controls.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.PwmRates">
            <summary>
            Bitmask, 0 = low rate, 1 = high rate.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.PwmDefaultRate">
            <summary>
            Low PWM frame output rate in Hz.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.PwmAlternateRate">
            <summary>
            High PWM frame output rate in Hz.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.Relays">
            <summary>
            Bitmask of relay/switch outputs, 0 = off, 1 = on.
            </summary>
            <remarks>
            Hardware version 1 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.RelaysPad">
            <summary>
            Bitmask of relay/switch outputs, 0 = off, 1 = on.
            </summary>
            <remarks>
            Hardware version 2 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.VoltageScale">
            <summary>
            Servo or battery voltage correction factor (float).
            </summary>
            <remarks>
            Hardware version 1 = Battery voltage scale.
            Hardware version 2 = Servo voltage scale.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.DsmBindState">
            <summary>
            DSM bind state.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.Debug">
            <summary>
            Debug level for IO board.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.RebootBootLoader">
            <summary>
            Reboot IO into boot-loader.
            </summary>
            <remarks>
            Set to the the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.RebootBootLoaderMagic"/> value to initiate.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.Crc">
            <summary>
            Get CRC of IO firmware.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.RCThrottleFailsafe">
            <summary>
            Throttle failsafe pulse length in microseconds.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.ForceSafetyOn">
            <summary>
            Force safety switch into 'disarmed' (PWM disabled state).
            </summary>
            <remarks>
            Set to the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.ForceSafetyOnMagic"/> value to initiate.
            </remarks>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Setup"/> page register offsets.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
            <remarks>
            Offset 8 is undefined.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.Features">
            <summary>
            Features.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.Arming">
            <summary>
            Arming controls.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.PwmRates">
            <summary>
            Bitmask, 0 = low rate, 1 = high rate.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.PwmDefaultRate">
            <summary>
            Low PWM frame output rate in Hz.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.PwmAlternateRate">
            <summary>
            High PWM frame output rate in Hz.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.Relays">
            <summary>
            Bitmask of relay/switch outputs, 0 = off, 1 = on.
            </summary>
            <remarks>
            Hardware version 1 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.RelaysPad">
            <summary>
            Bitmask of relay/switch outputs, 0 = off, 1 = on.
            </summary>
            <remarks>
            Hardware version 2 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.BatteryVoltageScale">
            <summary>
            Battery voltage correction factor (float).
            </summary>
            <remarks>
            Hardware version 1 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.ServoVoltageScale">
            <summary>
            Servo voltage correction factor (float).
            </summary>
            <remarks>
            Hardware version 2 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.DsmBindState">
            <summary>
            DSM bind state.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.Debug">
            <summary>
            Debug level for IO board.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.RebootBootLoader">
            <summary>
            Reboot IO into boot-loader.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.Crc1">
            <summary>
            Get CRC of IO firmware.
            </summary>
            <remarks>
            Storage space of <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.ForceSafetyOff"/> occupied by CRC.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.Crc2">
            <summary>
            Second part of CRC.
            </summary>
            <remarks>
            Read-only, space shared with <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.ForceSafetyOff"/>:
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.ForceSafetyOff">
            <summary>
            Force safety switch into 'armed' (PWM enabled) state.
            </summary>
            <remarks>
            Write-only.
            Read space taken by <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.Crc2"/>.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.RCThrottleFailsafeUs">
            <summary>
            Throttle failsafe pulse length in microseconds.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisterOffset.ForceSafetyOn">
            <summary>
            Force safety switch into 'disarmed' (PWM disabled state).
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRelayFlags">
            <summary>
            Defines the flags in the <see cref="P:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRegisters.Relays"/> register.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRelayFlags.Power1">
            <summary>
            Power relay 1.
            </summary>
            <remarks>
            Hardware version 1 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRelayFlags.Power2">
            <summary>
            Power relay 2.
            </summary>
            <remarks>
            Hardware version 1 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRelayFlags.AccessoryPower1">
            <summary>
            Accessory relay 1.
            </summary>
            <remarks>
            Hardware version 1 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioSetupRelayFlags.AccessoryPower2">
            <summary>
            Accessory relay 2.
            </summary>
            <remarks>
            Hardware version 1 only.
            </remarks>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusAlarmFlags">
            <summary>
            Defines the flags in the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisters.Alarms"/> register.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusAlarmFlags.BatteryLow">
            <summary>
            Battery voltage is very close to regulator dropout.
            </summary>
            <remarks>
            Hardware version 1 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusAlarmFlags.TemperatureHigh">
            <summary>
            Board temperature is high.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusAlarmFlags.ServoCurrent">
            <summary>
            Servo current limit was exceeded.
            </summary>
            <remarks>
            Hardware version 1 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusAlarmFlags.AccessoryCurrent">
            <summary>
            Accessory current limit was exceeded.
            </summary>
            <remarks>
            Hardware version 1 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusAlarmFlags.FmuTimeout">
            <summary>
            Timed-out waiting for controls from FMU.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusAlarmFlags.RCInputLost">
            <summary>
            Timed out waiting for RC input.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusAlarmFlags.PwmError">
            <summary>
            PWM configuration or output was bad.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusAlarmFlags.ServoVoltage">
            <summary>
            Servo voltage was out of the valid range (2.5 - 5.5 V).
            </summary>
            <remarks>
            Hardware version 2 only.
            </remarks>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMixerFlags">
            <summary>
            Defines the flags in the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisters.Mixer"/> register.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMixerFlags.LowerLimit">
            <summary>
            At least one actuator output has reached lower limit.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMixerFlags.UpperLimit">
            <summary>
            At least one actuator output has reached upper limit.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMixerFlags.YawLimit">
            <summary>
            Yaw control is limited because it causes output clipping.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags">
            <summary>
            Defines the flags in the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisters.Monitoring"/> register.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags.Armed">
            <summary>
            Armed okay and locally armed.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags.ManualOverride">
            <summary>
            Manual override.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags.RCInput">
            <summary>
            RC input is valid.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags.Ppm">
            <summary>
            PPM input is valid.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags.Dsm">
            <summary>
            DSM input is valid.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags.Sbus">
            <summary>
            SBUS input is valid.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags.Fmu">
            <summary>
            Controls from FMU are valid.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags.PwmRaw">
            <summary>
            Raw PWM from FMU is bypassing the mixer.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags.Mixer">
            <summary>
            Mixer is OK.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags.ArmedSync">
            <summary>
            Arming state between IO and FMU is in sync.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags.IOInitialized">
            <summary>
            Initialization of the IO completed without error.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags.Failsafe">
            <summary>
            Failsafe is active.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags.SafetyOff">
            <summary>
            Safety is off.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags.FmuInitialized">
            <summary>
            FMU was initialized and OK once.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags.St24">
            <summary>
            ST24 input is valid.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusMonitoringFlags.Sumd">
            <summary>
            SUMD input is valid.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisterOffset">
            <summary>
            PX4IO configuration page register offsets.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisterOffset.ProtocolVersion">
            <summary>
            Protocol version.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisterOffset.HardwareVersion">
            <summary>
            Magic numbers representing hardware revisions (to be defined).
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisterOffset.BootLoaderVersion">
            <summary>
            Boot-loader version.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisterOffset.TransferLimit">
            <summary>
            Maximum transfer size.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisterOffset.ControlCount">
            <summary>
            Hard coded max control count supported.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisterOffset.ActuatorCount">
            <summary>
            Hard coded max actuator output count.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisterOffset.RCInputCount">
            <summary>
            Hard coded max R/C input count supported.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisterOffset.AdcInputCount">
            <summary>
            Hard coded max ADC inputs.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisterOffset.RelayCount">
            <summary>
            Hard coded # of relay outputs.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisterOffset.ControlGroupCount">
            <summary>
            Hard coded # of control groups.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage">
            <summary>
            PX4IO pages.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Config">
            <summary>
            Static configuration page.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Status">
            <summary>
            Dynamic status page.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Actuators">
            <summary>
            Array of post-mix actuator outputs (-10000 to 10000).
            </summary>
            <remarks>
            Size specified by <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.ActuatorCount"/>.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Servos">
            <summary>
            Array of PWM servo output values in microseconds.
            </summary>
            <remarks>
            Size specified by <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.ActuatorCount"/>.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.RCInputRaw">
            <summary>
            Array of raw RC input values in microseconds.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.RCInput">
            <summary>
            Array of scaled RC input values (-10000 to 10000).
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.AdcInputRaw">
            <summary>
            Array of raw ADC values.
            </summary>
            <remarks>
            Size specified by <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.AdcInputCount"/>.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Pwm">
            <summary>
            PWM servo information.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Setup">
            <summary>
            Setup page.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Controls">
            <summary>
            Autopilot control values (-10000 to 10000).
            </summary>
            <remarks>
            Actuator control groups, one after the other, 8 wide.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.MixerLoad">
            <summary>
            Raw text to load into the mixer parser (ignores offset).
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.RCConfig">
            <summary>
            RC channel configuration.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.PwmDirect">
            <summary>
            PWM output, overrides mixer.
            </summary>
            <remarks>
            Size specified by <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.ActuatorCount"/>.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.PwmFailsafe">
            <summary>
            PWM failsafe values (zero disables output).
            </summary>
            <remarks>
            Size specified by <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.ActuatorCount"/>.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Sensors">
            <summary>
            Sensors connected to PX4IO.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.PwmMinimum">
            <summary>
            PWM minimum values for certain ESCs.
            </summary>
            <remarks>
            Size specified by <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.ActuatorCount"/>.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.PwmMaximum">
            <summary>
            PWM maximum values for certain ESCs.
            </summary>
            <remarks>
            Size specified by <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.ActuatorCount"/>.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.PwmDisarmed">
            <summary>
            PWM disarmed values that are active, even when safety switch is on.
            </summary>
            <remarks>
            Size specified by <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioConfigRegisters.ActuatorCount"/>.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Test">
            <summary>
            Debug and test page (not used in normal operation).
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisters">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Status"/> page register data.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisters.RegisterCount">
            <summary>
            Number of registers on this page.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisters.#ctor(System.UInt16[])">
            <summary>
            Creates an instance from register values.
            </summary>
            <param name="data">Register values read from the device.</param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisters.FreeMemory">
            <summary>
            Free memory.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisters.CpuLoad">
            <summary>
            CPU load.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisters.Monitoring">
            <summary>
            Monitoring flags.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisters.Alarms">
            <summary>
            Alarm flags.
            </summary>
            <remarks>
            Alarms latch, write 1 to a bit to clear it.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisters.BatteryVoltage">
            <summary>
            Battery voltage in mV.
            </summary>
            <remarks>
            Hardware version 1 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisters.BatteryCurrent">
            <summary>
            Battery current (raw ADC).
            </summary>
            <remarks>
            Hardware version 1 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisters.ServoVoltage">
            <summary>
            Servo rail voltage in mV.
            </summary>
            <remarks>
            Hardware version 2 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisters.RssiVoltage">
            <summary>
            RSSI voltage.
            </summary>
            <remarks>
            Hardware version 2 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisters.RssiPwm">
            <summary>
            RSSI PWM value.
            </summary>
            <remarks>
            Hardware version 2 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisters.Mixer">
            <summary>
            Mixer actuator limit flags.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisterOffset">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Status"/> page register offsets.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisterOffset.FreeMemory">
            <summary>
            Free memory.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisterOffset.CpuLoad">
            <summary>
            CPU load.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisterOffset.Monitoring">
            <summary>
            Monitoring flags.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisterOffset.Alarms">
            <summary>
            Alarm flags.
            </summary>
            <remarks>
            Alarms latch, write 1 to a bit to clear it.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisterOffset.BatteryVoltage">
            <summary>
            Battery voltage in mV.
            </summary>
            <remarks>
            Hardware version 1 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisterOffset.BatteryCurrent">
            <summary>
            Battery current (raw ADC).
            </summary>
            <remarks>
            Hardware version 1 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisterOffset.ServoVoltage">
            <summary>
            Servo rail voltage in mV.
            </summary>
            <remarks>
            Hardware version 2 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisterOffset.RssiVoltage">
            <summary>
            RSSI voltage.
            </summary>
            <remarks>
            Hardware version 2 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisterOffset.RssiPwm">
            <summary>
            RSSI PWM value.
            </summary>
            <remarks>
            Hardware version 2 only.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioStatusRegisterOffset.Mixer">
            <summary>
            Mixer actuator limit flags.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice">
            <summary>
            PX4IO UAV I/O board (hardware device), connected via SPI.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
            <see href="https://github.com/ArduPilot/PX4Firmware/tree/master/src/drivers/px4io"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.TransferPacingDelay">
            <summary>
            Delay used to pace transfers and allow the co-processor time to respond.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.#ctor(System.Int32,System.Int32,Windows.Devices.Spi.SpiMode,System.Int32,System.Int32,Windows.Devices.Spi.SpiSharingMode)">
            <summary>
            Creates an instance using the specified I2C device.
            </summary>
            <param name="busNumber">Bus controller number, zero based.</param>
            <param name="chipSelectLine">Slave Chip Select Line.</param>
            <param name="mode">Communication mode, i.e. clock polarity.</param>
            <param name="dataBitLength">Data length in bits.</param>
            <param name="clockFrequency">Frequency in Hz.</param>
            <param name="sharingMode">Sharing mode.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.Dispose(System.Boolean)">
            <summary>
            Frees resources owned by this instance.
            </summary>
            <param name="disposing">
            True when called via <see cref="M:System.IDisposable.Dispose"/>, false when called via finalizer.
            </param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice._hardware">
            <summary>
            SPI device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.Configuration">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Config"/> registers.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.Setup">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Setup"/> registers.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.Status">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Status"/> registers.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.RCConfig">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.RCConfig"/> registers.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.RCInputRaw">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.RCInputRaw"/> registers.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.RCInput">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.RCInput"/> registers.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.Controls">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Controls"/> registers.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.AdcInputRaw">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.AdcInputRaw"/> registers.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.Pwm">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Pwm"/> registers.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.PwmDirect">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.PwmDirect"/> registers.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.PwmFailsafe">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.PwmFailsafe"/> registers.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.PwmMinimum">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.PwmMinimum"/> registers.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.PwmMaximum">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.PwmMaximum"/> registers.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.PwmDisarmed">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.PwmDisarmed"/> registers.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.Actuators">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Actuators"/> registers.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.Servos">
            <summary>
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage.Servos"/> registers.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.Read">
            <summary>
            Reads all registers.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.ReadRegister(System.Byte,System.Byte)">
            <summary>
            Sends a command to read a single register.
            </summary>
            <param name="page"><see cref="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage"/> index.</param>
            <param name="offset"><see cref="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage"/> register offset.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.ReadRegisters(System.Byte,System.Byte,System.UInt16,System.Boolean)">
            <summary>
            Sends a command to read multiple registers.
            </summary>
            <param name="page"><see cref="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage"/> index.</param>
            <param name="offset"><see cref="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage"/> register offset.</param>
            <param name="count">
            Amount of data to read. When greater than <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.CountMask"/>
            multiple transfers will occur.
            </param>
            <param name="requireCount">
            Indicates the exact <paramref name="count"/> must be returned, otherwise
            an error is thrown. Set true by default. Set false for requests which
            may return a variable count.
            </param>
            <remarks>
            Automatically splits the request into multiple transfers and joins
            resulting data when <paramref name="count"/> exceeds the value possible
            in <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.CountMask"/>.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.WriteRegister(System.Byte,System.Byte,System.UInt16[])">
            <summary>
            Sends a command to write a register.
            </summary>
            <param name="page"><see cref="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage"/> index.</param>
            <param name="offset"><see cref="T:Emlid.WindowsIot.Hardware.Components.Px4io.Data.Px4ioPage"/> register offset.</param>
            <param name="values">Data values to write.</param>
            <returns>Response packet with data read and validated after request.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioDevice.Transfer(Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket)">
            <summary>
            Sends a request packet, checks the returns the response.
            </summary>
            <param name="request">Request packet with <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Crc"/> calculated.</param>
            <returns>Response packet with data read and validated after request.</returns>
            <exception cref="T:System.FormatException">Thrown when corruption occurred during send or receive.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the request was rejected in error.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the returned register count doesn't match the requested count.</exception>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket">
            <summary>
            PX4IO serial interface protocol packet.
            </summary>
            <see href="https://github.com/emlid/navio-rcio-linux-driver/blob/master/protocol.h"/>
            <remarks>
            <para>
            Communication is performed via writes to and reads from 16-bit virtual
            registers organized into pages of 255 registers each.
            </para>
            <para>
            The first two bytes of each write select a page and offset address
            respectively. Subsequent reads and writes increment the offset within
            the page.
            </para>
            <para>
            Some pages are read or write-only.
            </para>
            <para>
            Note that some pages may permit offset values greater than 255, which
            can only be achieved by long writes. The offset does not wrap.
            </para>
            <para>
            Writes to unimplemented registers are ignored. Reads from unimplemented
            registers return undefined values.
            </para>
            <para>
            As convention, values that would be floating point in other parts of
            the PX4 system are expressed as signed integer values scaled by 10000,
            e.g.control values range from -10000..10000.  Use the REG_TO_SIGNED and
            SIGNED_TO_REG macros to convert between register representation and
            the signed version, and REG_TO_FLOAT/FLOAT_TO_REG to convert to float.
            </para>
            <para>
            Note that the implementation of readable pages prefers registers within
            readable pages to be densely packed. Page numbers do not need to be
            packed.
            </para>
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Version">
            <summary>
            Highest compatible protocol version.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.HeaderSize">
            <summary>
            Header size in bytes.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.DataSize">
            <summary>
            Data <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Registers"/> size in bytes.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Size">
            <summary>
            Total size of a packet in bytes.
            </summary>
            <remarks>
            The full package size is always transmitted or received regardless of how many
            registers actually contain data.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.RegistersMaximum">
            <summary>
            Maximum number of <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Registers"/>.
            </summary>
            <remarks>
            The full package size is always transmitted or received regardless of how many
            registers actually contain data.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.CodeMask">
            <summary>
            Masks the code bits.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.CountMask">
            <summary>
            Masks the count bits.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates an instance with the specified values.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.#ctor(System.Byte,System.Byte,System.Byte,System.UInt16[])">
            <summary>
            Creates an instance with the specified values.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.#ctor(System.Byte[])">
            <summary>
            Creates an instance from raw data bytes.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.op_Equality(Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket,Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket)">
            <summary>
            Tests two objects of this type for equality by value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.op_Inequality(Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket,Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket)">
            <summary>
            Tests two objects of this type for inequality by value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Equals(System.Object)">
            <summary>
            Compares this object with another by value.
            </summary>
            <param name="value">Object with which to compare by value.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Equals(Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket)">
            <summary>
            Compares this object with another of the same type by value.
            </summary>
            <param name="value">Object with which to compare by value.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.GetHashCode">
            <summary>
            Returns a hash-code based on the current value of this object.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.CountCode">
            <summary>
            Count and code.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Code">
            <summary>
            Code from the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.CountCode"/> (masked with <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.CodeMask"/>).
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Count">
            <summary>
            Count from the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.CountCode"/> (masked with <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.CountMask"/>).
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Crc">
            <summary>
            CRC checksum.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Page">
            <summary>
            Page number.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Offset">
            <summary>
            Register offset.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Registers">
            <summary>
            Register values.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket._crcTable">
            <summary>
            Table used to calculate <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Crc"/>.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.CalculateCrc(Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket)">
            <summary>
            Calculates the CRC of a packet.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.CalculateCrc">
            <summary>
            Calculates and updates the <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Crc"/> of the current packet.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.ValidateCrc">
            <summary>
            Recalculates then validates the current <see cref="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.Crc"/>.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.FromByteArray(System.Byte[])">
            <summary>
            Creates an instance from raw data bytes.
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioPacket.ToByteArray">
            <summary>
            Converts this value to raw data bytes.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioResponseCode">
            <summary>
            PX4IO response packet code.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioResponseCode.Success">
            <summary>
            IO->FMU success reply.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioResponseCode.Corrupt">
            <summary>
            IO->FMU bad packet reply.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioResponseCode.Error">
            <summary>
            IO->FMU register op error reply.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioRequestCode">
            <summary>
            PX4IO request packet code.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioRequestCode.Read">
            <summary>
            FMU->IO read transaction.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Px4io.Px4ioRequestCode.Write">
            <summary>
            FMU->IO write transaction.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId">
            <summary>
            Encapsulates MB85RC#V device identifier data (3 bytes), allowing the
            individual parts to be easily accessed and validated.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.FujitsuManufacturerId">
            <summary>
            Original Fujitsu FRAM manufacturer ID.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.Size">
            <summary>
            Size in bytes.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.ManufacturerIdMask">
            <summary>
            Masks a valid manufacturer ID (only 3 bytes of an integer).
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.ProductIdMask">
            <summary>
            Masks a valid product ID (only 3 bytes of an integer).
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.ProductDensityMask">
            <summary>
            Masks a valid product density (only 4 bits of a byte).
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.#ctor(System.Byte[])">
            <summary>
            Creates an instance from data bytes.
            </summary>
            <param name="data">Device ID data bytes.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.#ctor(System.Int32,System.Byte,System.Byte)">
            <summary>
            Creates and instance from a manufacturer ID and product data.
            </summary>
            <param name="manufacturerId">Manufacturer ID.</param>
            <param name="productDensity">Product density.</param>
            <param name="productData">Product data.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates and instance from manufacturer and product IDs.
            </summary>
            <param name="manufacturerId">Manufacturer ID.</param>
            <param name="productId">Product ID.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.op_Equality(Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId,Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId)">
            <summary>
            Tests two objects of this type for equality by value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.op_Inequality(Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId,Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId)">
            <summary>
            Tests two objects of this type for inequality by value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.Equals(System.Object)">
            <summary>
            Compares this object with another by value.
            </summary>
            <param name="value">Object with which to compare by value.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.GetHashCode">
            <summary>
            Returns a hash-code based on the current value of this object.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.Data1">
            <summary>
            First data byte.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.Data2">
            <summary>
            Second data byte.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.Data3">
            <summary>
            Third data byte.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.ManufacturerId">
            <summary>
            Gets or sets the manufacturer ID.
            Built from <see cref="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.Data1"/> and the upper 4 bits of <see cref="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.Data2"/>.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.ProductId">
            <summary>
            Gets or sets the product ID, a combination of <see cref="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.ProductDensity"/> and <see cref="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.ProductData"/>.
            Built from the lower 4 bits of <see cref="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.Data2"/> and <see cref="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.Data3"/>;
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.ProductDensity">
            <summary>
            Product density, the lower 4 bits of <see cref="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.Data2"/>.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.ProductData">
            <summary>
            Proprietary part of the <see cref="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.ProductId"/>.
            The same as <see cref="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDeviceId.Data3"/>.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice">
            <summary>
            MB85RC04V 512 byte FRAM (Ferroelectric Random Access Memory) chip (hardware device), connected via I2C.
            </summary>
            <remarks>
            <para>
            The MB85RC04V is an FRAM (Ferroelectric Random Access Memory) chip in a configuration of 512
            words × 8 bits, using the ferroelectric process and silicon gate CMOS process technologies for forming the
            nonvolatile memory cells.
            </para>
            <para>
            Unlike SRAM, the MB85RC04V is able to retain data without using a data backup battery.
            </para>
            <para>
            The read/write endurance of the nonvolatile memory cells used for the MB85RC04V has improved to be at
            least 10^12 cycles, significantly outperforming other nonvolatile memory products in the number.
            </para>
            <para>
            The MB85RC04V does not need a polling sequence after writing to the memory such as the case of Flash
            memory or E2PROM.
            </para>
            <para>
            Data sheet: https://www.fujitsu.com/us/Images/MB85RC04V-DS501-00016-2v0-E.pdf
            </para>
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.Density">
            <summary>
            Density of this model.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.MaximumDevices">
            <summary>
            Maximum number of devices (chip number) for this model.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.MemorySize">
            <summary>
            Memory size in bytes.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.DeviceAddressBitmask">
            <summary>
            Bit mask for the A1 and A2 device address code.
            </summary>
            <remarks>
            The device address code identifies one device from up to 4 devices connected to the bus.
            Each MB85RC04V is given a unique 2 bits code on the device address pin (external hardware pin A2 and A1).
            The slave only responds if the received device address code is equal to this unique 2 bits code.
            </remarks>
            <remarks>
            Shifted down 1 bit because the <see cref="T:Windows.Devices.I2c.I2cDevice"/> handles the read/write flag automatically (a.k.a. 7-bit addressing).
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.MemoryUpperAddressBitmask">
            <summary>
            Bit mask for the memory upper address code.
            </summary>
            <remarks>
            This bit is not the setting bit for another chip/slave address, but the upper 1-bit setting bit for the memory address.
            Shifted down 1 bit because the <see cref="T:Windows.Devices.I2c.I2cDevice"/> handles the read/write flag automatically (a.k.a. 7-bit addressing).
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.MemoryLowerAddressCommandBytes">
            <summary>
            Number bytes which make-up the memory address in commands.
            </summary>
            <remarks>
            The MS85RC04V chip has a complex memory addressing scheme with only the lower byte
            specified as part of the command request. The 9th bit is separated into the device address
            so it is necessary to interact with multiple I2C addresses to access all memory individually.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.#ctor(System.Int32,System.Byte,Windows.Devices.I2c.I2cBusSpeed,Windows.Devices.I2c.I2cSharingMode)">
            <summary>
            Creates an instance connected to the specified I2C bus and chip number.
            </summary>
            <param name="busNumber">I2C bus controller number (zero based).</param>
            <param name="chipNumber">Chip number (device address code).</param>
            <param name="speed">Bus speed.</param>
            <param name="sharingMode">Sharing mode.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.Dispose(System.Boolean)">
            <summary>
            Frees resources owned by this instance.
            </summary>
            <param name="disposing">
            True when called via <see cref="M:System.IDisposable.Dispose"/>, false when called from the finalizer.
            </param>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.HardwareUpper">
            <summary>
            I2C device for the slave address with the MSB/upper address bit set and
            the read/write flag cleared for write (0 = input).
            </summary>
            <remarks>
            The base class <see cref="N:Emlid.WindowsIot.Hardware"/> device is opened with all non-I2C
            address bits clear, which means the MSB/upper address bit is 0 and the
            read/write flag is cleared for write (0 = input).
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.GetDeviceId(System.Int32,System.Byte,Windows.Devices.I2c.I2cBusSpeed,Windows.Devices.I2c.I2cSharingMode)">
            <summary>
            Gets the device identifier by sending the Device ID command to the
            specified chip number (device address code).
            </summary>
            <param name="busNumber">I2C bus controller number (zero based).</param>
            <param name="chipNumber">
            Device (chip) number, from zero to the <see cref="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.MaximumDevices"/> supported.
            </param>
            <param name="speed">Bus speed.</param>
            <param name="sharingMode">Sharing mode.</param>
            <returns>Device ID or null when no chip exists at the address.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.GetDataI2cAddress(System.Byte,System.Boolean)">
            <summary>
            Gets the I2C address for data commands with the specified chip number (device address code).
            </summary>
            <param name="chipNumber">
            Device (chip) number, from zero to the <see cref="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.MaximumDevices"/> supported.
            </param>
            <param name="upper">Set true when the data command is for the upper memory area.</param>
            <returns>7-bit I2C address.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.GetDeviceIdI2cAddress(System.Byte)">
            <summary>
            Gets the I2C address for the device ID command with the specified chip number (device address code).
            </summary>
            <param name="chipNumber">
            Device (chip code, not FRAM memory) address from zero to the supported <see cref="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.MaximumDevices"/>.
            </param>
            <returns>7-bit I2C address.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.GetI2cDeviceForMemoryAddress(System.Int32)">
            <summary>
            Gets the <see cref="T:Windows.Devices.I2c.I2cDevice"/> required to communicate with a specific memory address.
            </summary>
            <param name="address">Memory address. Leave zero when performing commands which operate on the current address.</param>
            <remarks>
            Because the chip mixes sub-address bits and flags with the slave address and the Windows
            <see cref="P:Windows.Devices.I2c.I2cDevice.ConnectionSettings"/> cannot be modified after creation, it is
            necessary to use multiple <see cref="T:Windows.Devices.I2c.I2cDevice"/> instances for each.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.GetMemoryAddressBytes(System.Int32)">
            <summary>
            Gets the I2C command memory address bytes for the specified logical address.
            </summary>
            <param name="address"></param>
            <returns>
            Byte array which can be written to request the specified memory address,
            assuming the correct I2C device is being used as provided by <see cref="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc04vDevice.GetI2cDeviceForMemoryAddress(System.Int32)"/>
            which may include the MSB in it's I2C address.
            </returns>
            <remarks>
            Besides being split into bytes, some older/smaller chips separate the MSB
            into the I2C device address.
            </remarks>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice">
            <summary>
            Base class for MB85RC#V FRAM (Ferroelectric Random Access Memory) family of chips (hardware devices), connected via I2C.
            </summary>
            <remarks>
            <para>
            The MB85RC#V family are FRAM (Ferroelectric Random Access Memory) chips in different configurations,
            providing more or less words of memory, using the ferroelectric process and silicon gate CMOS process technologies
            for forming the nonvolatile memory cells.
            </para>
            <para>
            Unlike SRAM, the MB85RC#V chips are able to retain data without using a data backup battery.
            </para>
            <para>
            The read/write endurance of the nonvolatile memory cells used for the MB85RC#V has improved to be at
            least 10^12 cycles, significantly outperforming other nonvolatile memory products in the number.
            </para>
            <para>
            The MB85RC#V chips do not need a polling sequence after writing to the memory such as the case of Flash
            memory or E2PROM.
            </para>
            <para>
            MB85RC04V data sheet: https://www.fujitsu.com/us/Images/MB85RC04V-DS501-00016-2v0-E.pdf
            MB85RC256V data sheet: https://www.fujitsu.com/us/Images/MB85RC256V-DS501-00017-3v0-E.pdf
            </para>
            <para>
            The "Device Address Code" has been renamed to "chip number" in code to help clarify documentation and
            avoid confusion of I2C and RAM address parameters.
            </para>
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.TypeCode">
            <summary>
            Code which identifies the device type, and are fixed at “1010” for the MB85RC#V.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.DataI2cAddress">
            <summary>
            7-bit I2C address of the first chip on the bus.
            </summary>
            <remarks>
            When using multiple chips the chip address must be added.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.DeviceIdI2cAddress">
            <summary>
            7-bit I2C address used for chip identification.
            </summary>
            <remarks>
            <para>
            The device ID sequence is as follows (Master = host, Slave = chip):
            1) Master: Start of transaction.
            2) Master: Byte 1 = 0XF8.
            3) Master: Byte 2 = Address of chip to query, e.g. 0XA0, 0XA4, 0XA8, 0XAA.
            4) Slave: Byte 3...5 device ID data bytes.
            5) Master: End of transaction.
            </para>
            <para>
            With read and write operations (bit 1) both 0XF8 and 0XF9 are used. Hence the device ID sequence for obtaining
            the device ID bytes is to call <see cref="M:Windows.Devices.I2c.I2cDevice.WriteRead(System.Byte[],System.Byte[])"/> writing one byte as
            the <see cref="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.DataI2cAddress"/> set to the chip number to identify (full byte as data, not shifted down to 7-bit address)
            then reading the resulting 3 device ID bytes, all in one operation.
            </para>
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.#ctor(System.Byte,System.Int32)">
            <summary>
            Creates an instance with the specified parameters.
            </summary>
            <param name="chipNumber">Chip number (device address code).</param>
            <param name="size">Memory size in bytes.</param>
            <remarks>
            Inheritors must connect to the I2C device and set it in the <see cref="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.Hardware"/> property,
            which is disposed by this base class.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.Dispose(System.Boolean)">
            <summary>
            <see cref="M:Emlid.UniversalWindows.DisposableObject.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.ChipNumber">
            <summary>
            Device address code (chip number).
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.Size">
            <summary>
            Size of memory in bytes.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.Hardware">
            <summary>
            Main I2C device of the chip (the lower memory area).
            </summary>
            <remarks>
            Additional I2C devices may exist to facilitate access to higher memory areas.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.GetDeviceId(System.Int32,Windows.Devices.I2c.I2cBusSpeed,Windows.Devices.I2c.I2cSharingMode)">
            <summary>
            Gets the device identifier of the first device (address code zero).
            </summary>
            <param name="busNumber">I2C bus controller number (zero based).</param>
            <param name="speed">Bus speed.</param>
            <param name="sharingMode">Sharing mode.</param>
            <returns>Device ID or null when no chip exists at the address.</returns>
            <remarks>
            It is not possible to get the identifier of other devices until the device
            density is known, because one bit of the device address code is used
            for the higher address commands with lower densities.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.GetDeviceId(System.Int32,System.Byte,System.Byte,Windows.Devices.I2c.I2cBusSpeed,Windows.Devices.I2c.I2cSharingMode)">
            <summary>
            Gets the device identifier by sending the Device ID command to the
            specified I2C (device ID) address.
            </summary>
            <param name="busNumber">I2C bus controller number (zero based).</param>
            <param name="idAddress">
            7-bit I2C device ID command address for the desired chip number
            (offset by device address code differently depending on model).
            </param>
            <param name="dataAddress">
            7-bit I2C memory address for the desired chip number
            (offset by device address code differently depending on model).
            Required to complete the ID command sequence.
            </param>
            <param name="speed">Bus speed.</param>
            <param name="sharingMode">Sharing mode.</param>
            <returns>Device ID or null when no chip exists at the address.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.ReadByte">
            <summary>
            Reads a single byte at the "current address" (next byte after the last operation).
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.ReadPage(System.Int32)">
            <summary>
            Reads a single byte at the "current address" (next byte after the last operation).
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.ReadByte(System.Int32)">
            <summary>
            Reads a single byte "randomly" at the specified address.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.ReadPage(System.Int32,System.Int32)">
            <summary>
            Reads a "page" of bytes "sequentially" starting at the specified address.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.WriteByte(System.Int32,System.Byte)">
            <summary>
            Writes a single byte at the specified address.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.WritePage(System.Int32,System.Byte[])">
            <summary>
            Writes a "page" of multiple bytes starting at the specified address.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.WritePage(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a "page" of multiple bytes starting at the specified address.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.GetI2cDeviceForMemoryAddress(System.Int32)">
            <summary>
            Gets the <see cref="T:Windows.Devices.I2c.I2cDevice"/> required to communicate with a specific memory address.
            </summary>
            <param name="address">Memory address. Leave zero when performing commands which operate on the current address.</param>
            <remarks>
            Because the chip mixes sub-address bits and flags with the slave address and the Windows
            <see cref="P:Windows.Devices.I2c.I2cDevice.ConnectionSettings"/> cannot be modified after creation, it is
            necessary to use multiple <see cref="T:Windows.Devices.I2c.I2cDevice"/> instances for each.
            <para>
            This base class implementation is the least complex like newer/larger chips, only
            requiring different I2C addresses for the read/write flag (no memory address bits).
            Older chips should override this implementation to index into the additional
            I2C devices they need to access all memory addresses.
            </para>
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.GetMemoryAddressBytes(System.Int32)">
            <summary>
            Gets the I2C command memory address bytes for the specified logical address.
            </summary>
            <param name="address"></param>
            <returns>
            Byte array which can be written to request the specified memory address,
            assuming the correct I2C device is being used as provided by <see cref="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rcvDevice.GetI2cDeviceForMemoryAddress(System.Int32)"/>
            which may include the MSB in it's I2C address.
            </returns>
            <remarks>
            Besides being split into bytes, some older/smaller chips separate the MSB
            into the I2C device address.
            </remarks>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc256vDevice">
            <summary>
            MB85RC256V 32KiB FRAM (Ferroelectric Random Access Memory) chip (hardware device), connected via I2C.
            </summary>
            <remarks>
            <para>
            The MB85RC256V is an FRAM (Ferroelectric Random Access Memory) chip in a configuration of 32,768
            words × 8 bits, using the ferroelectric process and silicon gate CMOS process technologies for forming the
            nonvolatile memory cells.
            </para>
            <para>
            Unlike SRAM, the MB85RC256V is able to retain data without using a data backup battery.
            </para>
            <para>
            The read/write endurance of the nonvolatile memory cells used for the MB85RC256V has improved to be
            at least 10^12 cycles, significantly outperforming other nonvolatile memory products in the number.
            </para>
            <para>
            The MB85RC256V does not need a polling sequence after writing to the memory such as the case of Flash
            memory or E2PROM.
            </para>
            <para>
            Data sheet: https://www.fujitsu.com/us/Images/MB85RC256V-DS501-00017-3v0-E.pdf
            </para>
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc256vDevice.Density">
            <summary>
            Density of this model.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc256vDevice.MaximumDevices">
            <summary>
            Maximum number of devices (chip number) for this model.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc256vDevice.MemorySize">
            <summary>
            Memory size in bytes.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc256vDevice.DeviceAddressBitmask">
            <summary>
            Bit mask for the A1, A2 and A0 device address code.
            </summary>
            <remarks>
            The device address code identifies one device from up to eight devices connected to the bus.
            Each MB85RC256V is given a unique 3 bits code on the device address pin(external hardware pin A2, A1,
            and A0). The slave only responds if the received device address code is equal to this unique 3 bits code.
            Shifted down 1 bit because the <see cref="T:Windows.Devices.I2c.I2cDevice"/> handles the read/write flag automatically (a.k.a. 7-bit addressing).
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc256vDevice.MemoryAddressCommandBytes">
            <summary>
            Number bytes which make-up the memory address in commands.
            </summary>
            <remarks>
            The MS85RC256V chip has a simple memory addressing scheme with all whole bytes
            specified as part of the command request. No bits are separated into the device address
            as was done on older smaller chips.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc256vDevice.#ctor(System.Int32,System.Byte,Windows.Devices.I2c.I2cBusSpeed,Windows.Devices.I2c.I2cSharingMode)">
            <summary>
            Creates an instance connected to the specified I2C bus and chip number.
            </summary>
            <param name="busNumber">I2C bus controller number (zero based).</param>
            <param name="chipNumber">Chip number (device address code).</param>
            <param name="speed">Bus speed.</param>
            <param name="sharingMode">Sharing mode.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc256vDevice.GetDeviceId(System.Int32,System.Byte,Windows.Devices.I2c.I2cBusSpeed,Windows.Devices.I2c.I2cSharingMode)">
            <summary>
            Gets the device identifier by sending the Device ID command to the
            specified chip number (device address code).
            </summary>
            <param name="busNumber">I2C bus controller number (zero based).</param>
            <param name="chipNumber">
            Device (chip) number, from zero to the <see cref="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc256vDevice.MaximumDevices"/> supported.
            </param>
            <param name="speed">Bus speed.</param>
            <param name="sharingMode">Sharing mode.</param>
            <returns>Device ID or null when no chip exists at the address.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc256vDevice.GetDataI2cAddress(System.Byte)">
            <summary>
            Gets the I2C address for data commands with the specified chip number (device address code).
            </summary>
            <param name="chipNumber">
            Device (chip) number, from zero to the <see cref="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc256vDevice.MaximumDevices"/> supported.
            </param>
            <returns>7-bit I2C address.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc256vDevice.GetDeviceIdI2cAddress(System.Byte)">
            <summary>
            Gets the I2C address for the device ID command with the specified chip number (device address code).
            </summary>
            <param name="chipNumber">
            Device (chip) number, from zero to the <see cref="F:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc256vDevice.MaximumDevices"/> supported.
            </param>
            <returns>7-bit I2C address.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Mb85rcv.Mb85rc256vDevice.GetMemoryAddressBytes(System.Int32)">
            <summary>
            Gets the I2C command memory address bytes for the specified logical address.
            </summary>
            <param name="address"></param>
            <returns>
            Byte array which can be written to request the specified memory address.
            </returns>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device">
            <summary>
            MS5611 barometric pressure and temperature sensor (hardware device), connected via I2C.
            </summary>
            <remarks>
            <see href="http://www.te.com/commerce/DocumentDelivery/DDEController?Action=showdoc&amp;DocId=Data+Sheet%7FMS5611-01BA03%7FB%7Fpdf%7FEnglish%7FENG_DS_MS5611-01BA03_B.pdf%7FCAT-BLPS0036">Data sheet.</see>
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.I2cAddress">
            <summary>
            7-bit I2C address of the first chip on the I2C bus.
            </summary>
            <remarks>
            When using multiple chips the Chip Select Bit (CSB) must be added for the second chip.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.ResetTime">
            <summary>
            Time to wait for the <see cref="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Reset"/> command to complete in microseconds.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.ConvertOsr256Time">
            <summary>
            Time to wait for conversion with OSR 256 in microseconds.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.ConvertOsr512Time">
            <summary>
            Time to wait for conversion with OSR 512 in microseconds.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.ConvertOsr1024Time">
            <summary>
            Time to wait for conversion with OSR 1024 in microseconds.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.ConvertOsr2048Time">
            <summary>
            Time to wait for conversion with OSR 2048 in microseconds.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.ConvertOsr4096Time">
            <summary>
            Time to wait for conversion with OSR 4096 in microseconds.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.PressureMin">
            <summary>
            Minimum pressure measurement in millibars.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.PressureMax">
            <summary>
            Maximum pressure measurement in millibars.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.TemperatureMin">
            <summary>
            Minimum pressure measurement in millibars.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.TemperatureMax">
            <summary>
            Maximum pressure measurement in millibars.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Accuracy">
            <summary>
            Accuracy of the temperature and pressure measurements.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.#ctor(System.Int32,System.Boolean,Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Osr,Windows.Devices.I2c.I2cBusSpeed,Windows.Devices.I2c.I2cSharingMode)">
            <summary>
            Creates an instance using the specified device and sampling rate.
            </summary>
            <param name="busNumber">I2C bus controller number (zero based).</param>
            <param name="csb">Chip Select Bit (CSB).</param>
            <param name="rate">Sampling rate.</param>
            <param name="speed">Bus speed.</param>
            <param name="sharingMode">Sharing mode.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Dispose(System.Boolean)">
            <summary>
            <see cref="M:Emlid.UniversalWindows.DisposableObject.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device._hardware">
            <summary>
            I2C device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Address">
            <summary>
            I2C address of the current chip.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.ChipSelectBit">
            <summary>
            Chip Select Bit (CSB).
            </summary>
            <remarks>
            False when connected to the first/only chip, true when connected to an optional second chip.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Prom">
            <summary>
            PROM data, containing the pressure and temperature calculation coefficients and other information.
            </summary>
            <remarks>
            Populated during <see cref="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Reset"/>.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Osr">
            <summary>
            Over-Sampling Rate to use for measurement.
            </summary>
            <remarks>
            Default is set during construction, but can be overridden.
            Then call <see cref="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Update"/> to re-calculate.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Pressure">
            <summary>
            Last measured pressure in millibars.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Temperature">
            <summary>
            Last measured temperature in celsius.
            </summary>
            <remarks>
            The temperature will be higher than outside because
            it is heated by other components.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.GetI2cAddress(System.Boolean)">
            <summary>
            Gets the I2C address for the
            </summary>
            <param name="csb">Chip Select Bit (CSB).</param>
            <returns>7-bit I2C address.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Reset">
            <summary>
            Resets the device, updates PROM data and clears current measurements.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Update">
            <summary>
            Converts then calculates the <see cref="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Pressure"/> and <see cref="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Temperature"/>.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.ReadProm">
            <summary>
            Reads calibration data from PROM, validates and updates the PROM data.
            </summary>
            <returns>
            True when data was read and the CRC check passed.
            </returns>
            <remarks>
            Should only be executed after <see cref="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Reset"/> to get accurate values.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.ReadPromCoefficient(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Reads a coefficient value from the PROM.
            </summary>
            <param name="index">Coefficient index (0-7).</param>
            <param name="buffer">Target buffer.</param>
            <param name="offset">Target offset.</param>
            <remarks>
            Reads <see cref="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.CoefficientSize"/> bytes into the target buffer at the specified offset.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.ConvertPressure(Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Osr)">
            <summary>
            Executes the <see cref="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command.ConvertD1Pressure"/> command to measure
            pressure at the specified OSR, waits then returns the result.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.ConvertTemperature(Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Osr)">
            <summary>
            Executes the <see cref="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command.ConvertD2Temperature"/> command to measure
            pressure at the specified OSR, waits then returns the result.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.WaitForConversion(Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Osr)">
            <summary>
            Waits for conversion at the specified OSR.
            </summary>
            <param name="rate">Over-Sampling Rate to wait for.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.GetConvertDelay(Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Osr)">
            <summary>
            Gets the time to wait in milliseconds for conversion with the specified OSR.
            </summary>
            <param name="rate">Over-Sampling Rate for which to return the delay.</param>
            <returns>Delay in milliseconds.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Calculate(System.Int32,System.Int32)">
            <summary>
            Calculates the <see cref="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Pressure"/> and <see cref="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Temperature"/> by applying the
            <see cref="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device.Prom"/> coefficients and other rules to the raw measurements.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command">
            <summary>
            Defines the I2C commands of the <see cref="T:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device"/>.
            </summary>
            <remarks>
            Instead of registers data is exchanged by means of writing a command byte
            then reading a variable number of data bytes returned by that command.
            Some commands must be executed in sequence.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command.Reset">
            <summary>
            Resets the device to a known state and prepares calibration
            values for the PROM read commands.
            </summary>
            <remarks>
            Follow with the <see cref="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command.PromRead"/> command.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command.AdcRead">
            <summary>
            Analog to Digital Converter (ADC) read command address.
            </summary>
            <remarks>
            Returns a 3 byte (24 bit) result.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command.PromRead">
            <summary>
            PROM read coefficient 0 (manufacturer data) command address.
            </summary>
            <remarks>
            Only called once after the <see cref="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command.Reset"/> command.
            A sequence of 8 reads must be made to read all coefficient values and checksum.
            Each read returns a 2 byte (16 bit) result. See <see cref="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.Update(System.Byte[])"/>.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command.ConvertD1Pressure">
            <summary>
            Digital pressure conversion command address.
            </summary>
            <remarks>
            Returns a 4 byte (32 bit) unsigned result.
            Over-Sampling Rate (OSR) option is specified by adding the <see cref="T:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Osr"/> to this address.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command.ConvertD2Temperature">
            <summary>
            Digital temperature conversion command address.
            </summary>
            <remarks>
            Returns a 4 byte (32 bit) unsigned result.
            Over-Sampling Rate (OSR) option is specified by adding the <see cref="T:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Osr"/> to this address.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command.ConvertOsr256Offset">
            <summary>
            Offset to the convert commands for OSR 256.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command.ConvertOsr512Offset">
            <summary>
            Offset to the convert commands for OSR 512.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command.ConvertOsr1024Offset">
            <summary>
            Offset to the convert commands for OSR 1024.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command.ConvertOsr2048Offset">
            <summary>
            Offset to the convert commands for OSR 2048.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command.ConvertOsr4096Offset">
            <summary>
            Offset to the convert commands for OSR 4096.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Osr">
            <summary>
            <see cref="T:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device"/> conversion Over-Sampling Rate (OSR).
            </summary>
            <remarks>
            These offsets are added to either the <see cref="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command.ConvertD1Pressure"/> or
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Command.ConvertD2Temperature"/> commands to specify the sample rate
            at which to perform the calculation.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Osr.Osr256">
            <summary>
            256 times.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Osr.Osr512">
            <summary>
            512 times.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Osr.Osr1024">
            <summary>
            1024 times.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Osr.Osr2048">
            <summary>
            2048 times.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Osr.Osr4096">
            <summary>
            4096 times.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData">
            <summary>
            Defines the PROM of the <see cref="T:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611Device"/>.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.CoefficientSize">
            <summary>
            Size of a PROM coefficient in bytes.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.CoefficientCount">
            <summary>
            Number of coefficients in the PROM.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.MemorySize">
            <summary>
            PROM memory size in bytes (must be read as individual variable requests).
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C0ManufacturerOffset">
            <summary>
            PROM read coefficient 0 (manufacturer data) offset.
            </summary>
            <remarks>
            2 bytes (16 bit) unsigned data.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C1SensitivityOffset">
            <summary>
            PROM read coefficient 1 (pressure sensitivity / SENS) offset.
            </summary>
            <remarks>
            2 bytes (16 bit) unsigned data.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C2TemperatureOffsetOffset">
            <summary>
            PROM read coefficient 2 (pressure offset / OFF) offset.
            </summary>
            <remarks>
            2 bytes (16 bit) unsigned data.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C3TemperatureCoefficientOffset">
            <summary>
            PROM read coefficient 3 (temperature coefficient of pressure sensitivity / TCS) offset.
            </summary>
            <remarks>
            2 bytes (16 bit) unsigned data.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C4TemperatureCoefficientOffset">
            <summary>
            PROM read coefficient 4 (temperature coefficient of pressure offset / TCO) offset.
            </summary>
            <remarks>
            2 bytes (16 bit) unsigned data.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C5TReferenceOffset">
            <summary>
            PROM read coefficient 5 (reference temperature / TREF) offset.
            </summary>
            <remarks>
            2 bytes (16 bit) unsigned data.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C6TemperatureSensitivityOffset">
            <summary>
            PROM read coefficient 6 (temperature coefficient of the temperature / TEMPSENS) offset.
            </summary>
            <remarks>
            2 bytes (16 bit) unsigned data.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C7SerialCrcOffset">
            <summary>
            PROM coefficient 7 (serial and CRC) offset.
            </summary>
            <remarks>
            2 bytes (16 bit) unsigned data.
            Lowest 4 bits are CRC.
            Highest 12 bits are serial number.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C0Manufacturer">
            <summary>
            Manufacturer reserved data, e.g. company or device ID.
            </summary>
            <remarks>
            Stored in memory at the <see cref="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C0ManufacturerOffset"/>.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C1PressureSensitivity">
            <summary>
            Pressure sensitivity (SENS).
            </summary>
            <remarks>
            Stored in memory at the <see cref="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C1SensitivityOffset"/>.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C2PressureOffset">
            <summary>
            Pressure offset (OFF).
            </summary>
            <remarks>
            Stored in memory at the <see cref="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C2TemperatureOffsetOffset"/>.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C3TemperatureFromPressureSensitivity">
            <summary>
            Temperature coefficient of pressure sensitivity (TCS).
            </summary>
            <remarks>
            Stored in memory at the <see cref="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C3TemperatureCoefficientOffset"/>.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C4TemperatureFromPressureOffset">
            <summary>
            Temperature coefficient of pressure offset (TCO).
            </summary>
            <remarks>
            Stored in memory at the <see cref="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C4TemperatureCoefficientOffset"/>.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C5TemperatureReference">
            <summary>
            Reference temperature (TREF).
            </summary>
            <remarks>
            Stored in memory at the <see cref="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C5TReferenceOffset"/>.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C6TemperatureSensitivity">
            <summary>
            Temperature sensitivity (TEMPSENS).
            </summary>
            <remarks>
            Stored in memory at the <see cref="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C6TemperatureSensitivityOffset"/>.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C7SerialNumber">
            <summary>
            Serial number.
            </summary>
            <remarks>
            Stored in memory at <see cref="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C7SerialCrcOffset"/> in the upper 12 bits.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C7Crc">
            <summary>
            CRC check code which validated the data.
            </summary>
            <remarks>
            Stored in memory at <see cref="F:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.C7SerialCrcOffset"/> in the lower 4 bits.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.Validate(System.Byte[])">
            <summary>
            Validates a PROM data set (bytes read from all coefficients/memory).
            </summary>
            <param name="buffer">PROM data buffer to validate.</param>
            <returns>
            True when the CRC check passed, false when failed.
            </returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.Update(System.Byte[])">
            <summary>
            Validates then reads properties from a PROM data set (bytes read from all coefficients/memory). 
            </summary>
            <param name="buffer">PROM data buffer to read.</param>
            <returns>
            True when the CRC check passed, false when failed.
            </returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Ms5611.Ms5611PromData.GetCoefficient(System.Byte[],System.Int32)">
            <summary>
            Extracts a single coefficient value from a PROM data set (bytes read from all coefficients/memory).
            </summary>
            <param name="buffer">PROM data buffer to read.</param>
            <param name="offset">Coefficient offset at which to read.</param>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue">
            <summary>
            <see cref="T:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device"/> channel value.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Maximum">
            <summary>
            Maximum value (4095).
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Always">
            <summary>
            This value, one higher than <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Maximum"/>, causes the channel to be always on or off.
            The same as one whole clock cycle.
            </summary>
            <remarks>
            If both always on and always off are set, off takes precedence.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an instance with the specified values
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates an instance with the values from a byte array.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.op_Equality(Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue,Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue)">
            <summary>
            Tests two objects of this type for equality by value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.op_Inequality(Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue,Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue)">
            <summary>
            Tests two objects of this type for inequality by value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Equals(System.Object)">
            <summary>
            Compares this object with another by value.
            </summary>
            <param name="value">Object with which to compare by value.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.GetHashCode">
            <summary>
            Returns a hash-code based on the current value of this object.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.On">
            <summary>
            12-bit rising "on" time in ticks within the range 0-<see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Maximum"/> or <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Always"/> for always on mode.
            </summary>
            <remarks>
            When greater than <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Off"/> the pulse spans two clock cycles.
            Set via <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Width"/> to automatically set <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Always"/> with a width of <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Maximum"/>.
            Always off takes precedence to always on when both are set.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Off">
            <summary>
            12-bit falling "off" time in ticks within the range 0-<see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Maximum"/> or <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Always"/> for always off mode.
            </summary>
            <remarks>
            When less than <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.On"/> the pulse spans two clock cycles.
            Set via <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Width"/> to automatically set <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Always"/> with a width of zero.
            Always off takes precedence to always on when both are set.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Width">
            <summary>
            Width of the pulse in ticks, the difference between <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.On"/> and <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Off"/>.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.ToByteArray">
            <summary>
            Converts all values to a byte array which can be written to the channel.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.FromByteArray(System.Byte[],System.Int32)">
            <summary>
            Converts a byte array into a value of this type.
            </summary>
            <param name="data">Byte array to convert.</param>
            <param name="offset">Offset at which to start conversion.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.CalculateWidth(System.Int32,System.Int32)">
            <summary>
            Calculates PWM pulse width in ticks from on (rising) and off (falling) delay/tick values.
            </summary>
            <param name="on">PWM on time.</param>
            <param name="off">PWM off time.</param>
            <returns>Pulse width in ticks.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.FromWidth(System.Int32,System.Int32)">
            <summary>
            Creates a value calculated from <paramref name="width"/> and optional <paramref name="delay"/>.
            </summary>
            <remarks>
            Automatically converts zero width to "always off" and maximum width to "always on".
            </remarks>
            <param name="width">
            Pulse width in clock ticks, between 0 and <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Maximum"/>.
            When zero or lower it will be set to <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Always"/> off.
            When <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Maximum"/> or greater it will be set to <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Always"/> on.
            </param>
            <param name="delay">
            Optional delay in clock ticks, between 0 and <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Maximum"/>.
            When zero or lower it will be set to <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Always"/> off.
            When <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Maximum"/> or greater it will be set to <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Always"/> on.
            </param>
            <returns>Calculated channel value.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.CalculateWidthMs(System.Int32,System.Int32)">
            <summary>
            Calculates pulse width in fractions of a millisecond from ticks and frequency.
            </summary>
            <param name="frequency">Frequency in Hz.</param>
            <param name="ticks">Length in clock ticks.</param>
            <returns>Milliseconds.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.ToWidthMs(System.Int32)">
            <summary>
            Calculates the pulse width in milliseconds based on a given frequency in Hz.
            </summary>
            <param name="frequency">Frequency in Hz for which to calculate the width.</param>
            <returns>Pulse width in milliseconds.</returns>
            <remarks>
            Same as calling <see cref="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.CalculateWidthMs(System.Int32,System.Int32)"/> with the current <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Width"/>.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.FromWidthMs(System.Decimal,System.Int32,System.Int32)">
            <summary>
            Creates a value calculated from <paramref name="width"/> (given a <paramref name="frequency"/>)
            and optional <paramref name="delay"/>.
            </summary>
            <param name="width">
            Pulse width in milliseconds. Cannot be greater than one clock interval (1000 / frequency).
            </param>
            <param name="frequency">Clock frequency of the <see cref="T:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device"/>.</param>
            <param name="delay">Optional delay in milliseconds. Cannot be greater than one clock interval (1000 / frequency).</param>
            <returns>Value with on and off properties calculated.</returns>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device">
            <summary>
            PCA9685 PWM LED driver (hardware device), connected via I2C.
            </summary>
            <remarks>
            The PCA9685 is a 16 channel, 12-bit PWM LED controller with I2C bus connection.
            <para>
            This class enables direct control of the device intended for internal use.
            If exposed to other users, it should wrapped by a thread safe class which
            coordinates access and deals with object lifetime (dispose).
            See http://www.nxp.com/documents/data_sheet/PCA9685.pdf for more information.
            </para>
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.I2cAddress">
            <summary>
            7-bit I2C address of the first PCA9685 on the bus.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.I2cAllCallAddress">
            <summary>
            7-bit I2C address of the PCA9685 "all call" address.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.MaximumDevices">
            <summary>
            Maximum number of devices (chip number) for this model.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ChannelStartAddress">
            <summary>
            Offset of the first channel register, <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel0OnLow"/>.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ChannelSize">
            <summary>
            Size of the channel register groups, added to <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ChannelStartAddress"/> to calculate the address of specific channels.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ChannelCount">
            <summary>
            Total number of channels.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.InternalClockSpeed">
            <summary>
            Internal clock speed in Hz.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ClockSpeedMaximum">
            <summary>
            Maximum clock speed in Hz.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.PrescaleMinimum">
            <summary>
            Minimum value of the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Prescale"/> register.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.PrescaleMaximum">
            <summary>
            Maximum value of the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Prescale"/> register.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.PrescaleDefault">
            <summary>
            Default value of the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Prescale"/> register.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ModeSwitchDelay">
            <summary>
            Time to wait in milliseconds after switching modes, stopping or starting the oscillator.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.#ctor(System.Int32,System.Byte,System.Nullable{System.Int32},Windows.Devices.I2c.I2cBusSpeed,Windows.Devices.I2c.I2cSharingMode)">
            <summary>
            Creates an instance using the specified I2C device.
            </summary>
            <param name="busNumber">I2C bus controller number (zero based).</param>
            <param name="chipNumber">Chip number.</param>
            <param name="clockSpeed">
            Optional external clock speed in Hz. Otherwise the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.InternalClockSpeed"/> is used.
            This is a physical property, not a software option.
            </param>
            <param name="speed">Bus speed.</param>
            <param name="sharingMode">Sharing mode.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Dispose(System.Boolean)">
            <summary>
            Frees resources owned by this instance.
            </summary>
            <param name="disposing">
            True when called via <see cref="M:System.IDisposable.Dispose"/>, false when called via finalizer.
            </param>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device._hardware">
            <summary>
            I2C device.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Channels">
            <summary>
            Channels and their values (also settable).
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ClockIsExternal">
            <summary>
            Indicates the PWM clock is controlled externally.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ClockSpeed">
            <summary>
            PWM clock speed in Hz, either internal or external.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Frequency">
            <summary>
            Frequency in Hz.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.FrequencyDefault">
            <summary>
            Frequency when the hardware <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.PrescaleDefault"/> is set.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.FrequencyMinimum">
            <summary>
            Minimum frequency based on <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ClockSpeed"/> and <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.PrescaleMaximum"/> (inverse relation).
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.FrequencyMaximum">
            <summary>
            Maximum frequency based on <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ClockSpeed"/> and <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.PrescaleMinimum"/> (inverse relation).
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Mode1Register">
            <summary>
            Last known mode 1 register bits.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Mode2Register">
            <summary>
            Last known mode 2 register bits.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.PwmMsMinimum">
            <summary>
            Minimum PWM length in milliseconds, based on the current frequency.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.PwmMsMaximum">
            <summary>
            Maximum PWM length in milliseconds, based on the current frequency.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.GetI2cAddress(System.Byte)">
            <summary>
            Gets the I2C address for communication with the specified chip number.
            </summary>
            <param name="chipNumber">
            Device (chip) number, from zero to the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.MaximumDevices"/> supported.
            </param>
            <returns>7-bit I2C address.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ReadAll">
            <summary>
            Reads all values from the device and updates properties.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ReadMode1">
            <summary>
            Reads the current value of the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Mode1"/> register.
            </summary>
            <returns>Bit flags corresponding to the actual mode byte.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ReadMode2">
            <summary>
            Reads the current value of the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Mode2"/> register.
            </summary>
            <returns>Bit flags corresponding to the actual mode byte.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Sleep">
            <summary>
            Enters sleep mode.
            </summary>
            <remarks>
            Sets the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Mode1"/> register <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode1Bits.Sleep"/> bit
            then waits for <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ModeSwitchDelay"/> to allow the oscillator to stop.
            </remarks>
            <returns>
            True when mode was changed, false when already set.
            </returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Wake">
            <summary>
            Leaves sleep mode.
            </summary>
            <remarks>
            Clears the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Mode1"/> register <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode1Bits.Sleep"/> bit
            then waits for <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ModeSwitchDelay"/> to allow the oscillator to start.
            </remarks>
            <returns>
            True when mode was changed, false when not sleeping.
            </returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Restart">
            <summary>
            Restarts the device with default options, then updates all properties.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Restart(Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode1Bits)">
            <summary>
            Restarts the device with additional options specified, then updates all properties.
            </summary>
            <param name="options">
            Optional mode 1 parameters to add to the final restart sequence. A logical OR is applied to this value and
            the standard <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode1Bits.Restart"/>, <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode1Bits.ExternalClock"/> and
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode1Bits.AutoIncrement"/> bits.
            </param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.CalculateFrequency(System.Byte,System.Int32)">
            <summary>
            Calculates the effective frequency from a <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Prescale"/> value and clock speed.
            </summary>
            <param name="prescale">Prescale value from which to calculate frequency.</param>
            <param name="clockSpeed">Clock speed with which to calculate the frequency.</param>
            <returns>Calculated frequency in Hz.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.CalculatePrescale(System.Int32,System.Int32)">
            <summary>
            Calculates the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Prescale"/> value from a desired frequency and clock speed.
            </summary>
            <remarks>
            Due to scaling only certain frequencies are possible. To get the resulting frequency from the desired
            frequency it is necessary to re-calculate the effective frequency back from the prescale,
            i.e. call <see cref="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.CalculateFrequency(System.Byte,System.Int32)"/>.
            </remarks>
            <param name="frequency">
            Desired frequency in Hz.
            Must be between <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.FrequencyMinimum"/> and <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.FrequencyMaximum"/> to get a valid result.
            </param>
            <param name="clockSpeed"></param>
            <returns>Calculated prescale value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when an invalid parameter is passed.
            </exception>
            <exception cref="T:System.OverflowException">
            Thrown when parameters are passed which causes the resulting prescale to be higher than
            <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.PrescaleMaximum"/> or lower than <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.PrescaleMinimum"/>.
            </exception>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ReadFrequency">
            <summary>
            Reads the prescale register and calculates the <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Frequency"/> (and related properties)
            based on <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ClockSpeed"/>.
            </summary>
            <returns>
            Frequency in Hz. Related properties are also updated.
            </returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.WriteFrequency(System.Int32)">
            <summary>
            Calculates the prescale value from the frequency (according to <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ClockSpeed"/>)
            then writes that register, then calls <see cref="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ReadFrequency"/> to update properties.
            Note the actual frequency may differ to the requested frequency due to clock scale (rounding).
            </summary>
            <remarks>
            The prescale can only be set during sleep mode. This method enters <see cref="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Sleep"/> if necessary,
            then only if the device was awake before, calls <see cref="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Wake"/> afterwards. It's important not to
            start output unexpectedly to avoid damage, i.e. if the device was sleeping before, the frequency is
            changed without starting the oscillator.
            </remarks>
            <param name="frequency">Desired frequency to set in Hz.</param>
            <returns>
            Effective frequency in Hz, read-back and recalculated after setting the desired frequency.
            Frequency in Hz. Related properties are also updated.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="frequency"/> is less than <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.FrequencyMinimum"/> or greater than
            <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.FrequencyMaximum"/>.
            </exception>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.GetChannelAddress(System.Int32)">
            <summary>
            Gets the register address of a channel by index.
            </summary>
            <param name="index">Zero based channel number (0-15) or 16 for the "all call" channel.</param>
            <returns>Channel address.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Clear">
            <summary>
            Clears all channels cleanly, then updates all <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Channels"/>.
            </summary>
            <remarks>
            To "cleanly" clear the channels, it is necessary to first ensure they are not disabled,
            set them to zero, then disable them. Otherwise the ON value and the low OFF value
            remain because writes are ignored when the OFF channel bit 12 is already set.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ReadChannel(System.Int32)">
            <summary>
            Reads a whole channel value (on and off), and updates it in <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Channels"/>.
            </summary>
            <param name="index">Zero based channel number (0-15).</param>
            <returns>Channel value</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ReadChannels(System.Int32,System.Int32)">
            <summary>
            Reads multiple channel values (both on and off for each), and updates it in <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Channels"/>.
            </summary>
            <param name="index">Zero based channel number (0-15).</param>
            <param name="count">Number of channels to read.</param>
            <returns>Channel values</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ReadChannelOn(System.Int32)">
            <summary>
            Reads the PWM "on" (rising) value of a channel, and updates it in <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Channels"/>.
            </summary>
            <param name="index">Zero based channel number (0-15).</param>
            <returns>Channel value.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ReadChannelOff(System.Int32)">
            <summary>
            Reads the PWM "off" (falling) value of a channel, and updates it in <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Channels"/>.
            </summary>
            <param name="index">Zero based channel number (0-15).</param>
            <returns>Channel value.</returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.WriteChannelLength(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the "on" and "off" values of a channel from length (and optional delay),
            then writes them together, and updates it in <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Channels"/>.
            </summary>
            <param name="index">Zero based channel number (0-15) or 16 for the "all call" channel.</param>
            <param name="width">Pulse width in clock ticks.</param>
            <param name="delay">Optional delay in clock ticks.</param>
            <returns>
            Updated channel value or null when all channels were updated.
            </returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.WriteChannelMs(System.Int32,System.Decimal,System.Int32)">
            <summary>
            Calculates the "on" and "off" values of a channel from milliseconds (and optional delay),
            then writes them together, and updates it in <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Channels"/>.
            </summary>
            <param name="index">Zero based channel number (0-15) or 16 for the "all call" channel.</param>
            <param name="width">
            Pulse width in milliseconds. Cannot be greater than one clock interval (1000 / frequency).
            </param>
            <param name="delay">Optional delay in milliseconds. Cannot be greater than one clock interval (1000 / frequency).</param>
            <returns>
            Updated channel value or null when all channels were updated.
            </returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.WriteChannel(System.Int32,Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue)">
            <summary>
            Writes the "on" and "off" values of a channel together, and updates it in <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Channels"/>.
            </summary>
            <param name="index">Zero based channel number (0-15) or 16 for the "all call" channel.</param>
            <param name="value"><see cref="T:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue"/> to write.</param>
            <returns>
            Updated channel value or null when all channels were updated.
            </returns>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.WriteChannels(System.Int32,System.Collections.Generic.IList{Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue})">
            <summary>
            Writes multiple channels together (both "on" and "off" values), and updates it in <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Channels"/>.
            </summary>
            <param name="index">Zero based channel number (0-15) or 16 for the "all call" channel.</param>
            <param name="values">Collection of <see cref="T:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue"/>s to write.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.WriteChannelOn(System.Int32,System.Int32)">
            <summary>
            Writes the PWM "on" (rising) value of a channel.
            </summary>
            <param name="index">Zero based channel number (0-15) or 16 for the "all call" channel.</param>
            <param name="value">12-bit channel value in the range 0-<see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Maximum"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="value"/> is greater than <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Maximum"/>.</exception>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.WriteChannelOff(System.Int32,System.Int32)">
            <summary>
            Writes the PWM "off" (falling) value of a channel.
            </summary>
            <param name="index">Zero based channel number (0-15) or 16 for the "all call" channel.</param>
            <param name="value">12-bit channel value in the range 0-<see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Maximum"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="value"/> is greater then <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685ChannelValue.Maximum"/>.</exception>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.ReadAllChannels">
            <summary>
            Reads all channels and updates <see cref="P:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device.Channels"/>.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register">
            <summary>
            Defines the I2C registers of the <see cref="T:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Device"/>.
            </summary>
            <remarks>
            Auto Increment past register 69 will point to mode 1 register (register 0).
            Auto Increment also works from register 250 to register 254, then rolls over to register 0.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Mode1">
            <summary>
            Mode register 1, controls sleep, restart, auto-increment, external clocking, addressing.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Mode2">
            <summary>
            Mode register 2, controls inversion, output condition, drive type.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.SubAddress1">
            <summary>
            Sub-address 1.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.SubAddress2">
            <summary>
            Sub-address 2.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.SubAddress3">
            <summary>
            Sub-address 2.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.AllCall">
            <summary>
            Enables or disables calling all LED channels.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Prescale">
            <summary>
            Prescaler for PWM output frequency.
            </summary>
            <remarks>
            Minimum value is 3.
            Writes to prescale register are blocked when sleep bit is 0 (mode 1).
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.ModeTest">
            <summary>
            Test mode.
            </summary>
            <remarks>
            Reserved. Writes to this register may cause unpredictable results.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel0OnLow">
            <summary>
            Low byte of 12-bit word for rising edge of LED channel 0.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel0OnHigh">
            <summary>
            High byte of 12-bit word for rising edge of LED channel 0.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel0OffLow">
            <summary>
            Low byte of 12-bit word for falling edge of LED channel 0.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel0OffHigh">
            <summary>
            High byte of 12-bit word for falling edge of LED channel 0.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel1OnLow">
            <summary>
            Low byte of 12-bit word for rising edge of LED channel 1.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel1OnHigh">
            <summary>
            High byte of 12-bit word for rising edge of LED channel 1.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel1OffLow">
            <summary>
            Low byte of 12-bit word for falling edge of LED channel 1.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel1OffHigh">
            <summary>
            High byte of 12-bit word for falling edge of LED channel 1.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel2OnLow">
            <summary>
            Low byte of 12-bit word for rising edge of LED channel 2.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel2OnHigh">
            <summary>
            High byte of 12-bit word for rising edge of LED channel 2.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel2OffLow">
            <summary>
            Low byte of 12-bit word for falling edge of LED channel 2.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel2OffHigh">
            <summary>
            High byte of 12-bit word for falling edge of LED channel 2.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel3OnLow">
            <summary>
            Low byte of 12-bit word for rising edge of LED channel 3.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel3OnHigh">
            <summary>
            High byte of 12-bit word for rising edge of LED channel 3.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel3OffLow">
            <summary>
            Low byte of 12-bit word for falling edge of LED channel 3.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel3OffHigh">
            <summary>
            High byte of 12-bit word for falling edge of LED channel 3.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel4OnLow">
            <summary>
            Low byte of 12-bit word for rising edge of LED channel 4.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel4OnHigh">
            <summary>
            High byte of 12-bit word for rising edge of LED channel 4.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel4OffLow">
            <summary>
            Low byte of 12-bit word for falling edge of LED channel 4.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel4OffHigh">
            <summary>
            High byte of 12-bit word for falling edge of LED channel 4.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel5OnLow">
            <summary>
            Low byte of 12-bit word for rising edge of LED channel 5.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel5OnHigh">
            <summary>
            High byte of 12-bit word for rising edge of LED channel 5.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel5OffLow">
            <summary>
            Low byte of 12-bit word for falling edge of LED channel 5.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel5OffHigh">
            <summary>
            High byte of 12-bit word for falling edge of LED channel 5.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel6OnLow">
            <summary>
            Low byte of 12-bit word for rising edge of LED channel 6.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel6OnHigh">
            <summary>
            High byte of 12-bit word for rising edge of LED channel 6.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel6OffLow">
            <summary>
            Low byte of 12-bit word for falling edge of LED channel 6.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel6OffHigh">
            <summary>
            High byte of 12-bit word for falling edge of LED channel 6.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel7OnLow">
            <summary>
            Low byte of 12-bit word for rising edge of LED channel 7.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel7OnHigh">
            <summary>
            High byte of 12-bit word for rising edge of LED channel 7.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel7OffLow">
            <summary>
            Low byte of 12-bit word for falling edge of LED channel 7.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel7OffHigh">
            <summary>
            High byte of 12-bit word for falling edge of LED channel 7.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel8OnLow">
            <summary>
            Low byte of 12-bit word for rising edge of LED channel 8.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel8OnHigh">
            <summary>
            High byte of 12-bit word for rising edge of LED channel 8.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel8OffLow">
            <summary>
            Low byte of 12-bit word for falling edge of LED channel 8.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel8OffHigh">
            <summary>
            High byte of 12-bit word for falling edge of LED channel 8.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel9OnLow">
            <summary>
            Low byte of 12-bit word for rising edge of LED channel 9.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel9OnHigh">
            <summary>
            High byte of 12-bit word for rising edge of LED channel 9.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel9OffLow">
            <summary>
            Low byte of 12-bit word for falling edge of LED channel 9.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel9OffHigh">
            <summary>
            High byte of 12-bit word for falling edge of LED channel 9.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel10OnLow">
            <summary>
            Low byte of 12-bit word for rising edge of LED channel 10.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel10OnHigh">
            <summary>
            High byte of 12-bit word for rising edge of LED channel 10.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel10OffLow">
            <summary>
            Low byte of 12-bit word for falling edge of LED channel 10.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel10OffHigh">
            <summary>
            High byte of 12-bit word for falling edge of LED channel 10.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel11OnLow">
            <summary>
            Low byte of 12-bit word for rising edge of LED channel 11.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel11OnHigh">
            <summary>
            High byte of 12-bit word for rising edge of LED channel 11.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel11OffLow">
            <summary>
            Low byte of 12-bit word for falling edge of LED channel 11.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel11OffHigh">
            <summary>
            High byte of 12-bit word for falling edge of LED channel 11.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel12OnLow">
            <summary>
            Low byte of 12-bit word for rising edge of LED channel 12.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel12OnHigh">
            <summary>
            High byte of 12-bit word for rising edge of LED channel 12.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel12OffLow">
            <summary>
            Low byte of 12-bit word for falling edge of LED channel 12.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel12OffHigh">
            <summary>
            High byte of 12-bit word for falling edge of LED channel 12.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel13OnLow">
            <summary>
            Low byte of 12-bit word for rising edge of LED channel 13.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel13OnHigh">
            <summary>
            High byte of 12-bit word for rising edge of LED channel 13.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel13OffLow">
            <summary>
            Low byte of 12-bit word for falling edge of LED channel 13.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel13OffHigh">
            <summary>
            High byte of 12-bit word for falling edge of LED channel 13.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel14OnLow">
            <summary>
            Low byte of 12-bit word for rising edge of LED channel 14.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel14OnHigh">
            <summary>
            High byte of 12-bit word for rising edge of LED channel 14.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel14OffLow">
            <summary>
            Low byte of 12-bit word for falling edge of LED channel 14.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel14OffHigh">
            <summary>
            High byte of 12-bit word for falling edge of LED channel 14.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel15OnLow">
            <summary>
            Low byte of 12-bit word for rising edge of LED channel 15.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel15OnHigh">
            <summary>
            High byte of 12-bit word for rising edge of LED channel 15.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel15OffLow">
            <summary>
            Low byte of 12-bit word for falling edge of LED channel 15.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Channel15OffHigh">
            <summary>
            High byte of 12-bit word for falling edge of LED channel 15.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.AllChannelsOnLow">
            <summary>
            Low byte of 12-bit word for rising edge of all channels.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.AllChannelsOnHigh">
            <summary>
            High byte of 12-bit word for rising edge of all channels.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.AllChannelsOffLow">
            <summary>
            Low byte of 12-bit word for falling edge of all channels.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.AllChannelsOffHigh">
            <summary>
            High byte of 12-bit word for falling edge of all channels.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode1Bits">
            <summary>
            Bitmask for the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Mode1"/> register.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode1Bits.None">
            <summary>
            No bits set.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode1Bits.AllCall">
            <summary>
            Enables or disables the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.AllCall"/>.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode1Bits.SubAddress3">
            <summary>
            Enables or disables the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.SubAddress3"/>.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode1Bits.SubAddress2">
            <summary>
            Enables or disables the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.SubAddress2"/>
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode1Bits.SubAddress1">
            <summary>
            Enables or disables the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.SubAddress1"/>
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode1Bits.Sleep">
            <summary>
            Enables or disables low-power mode (oscillator off).
            </summary>
            <remarks>
            <para>
            It takes 500 µs maximum for the oscillator to be up and running once sleep bit has been set to 0. Timings on LED# outputs are not
            guaranteed if PWM control registers are accessed within the 500 µs window. There is no start-up delay required when using the
            external clock pin as the PWM clock.
            </para>
            <para>
            No PWM control is possible when the oscillator is off.
            </para>
            <para>
            When the oscillator is off (sleep mode) the LED# outputs cannot be turned on, off or dimmed/blinked.
            </para>
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode1Bits.AutoIncrement">
            <summary>
            When the Auto Increment flag is set the control register is automatically incremented
            after a read or write. This allows the user to program the registers sequentially.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode1Bits.ExternalClock">
            <summary>
            Enables or disables the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.SubAddress2"/>
            </summary>
            <remarks>
            <para>
            To use the external clock pin, this bit must be set by the following sequence:
            </para>
            <list type="number">
            <item>
            Set the sleep bit in mode 1. This turns off the internal oscillator.
            </item>
            <item>
            Set both the sleep and external clock bits in mode 1.The switch is now made.
            The external clock can be active during the switch because the sleep bit is set.
            </item>
            </list>
            <para>
            This bit is a "sticky bit", that is, it cannot be cleared by writing a 0 to it. The
            external clock bit can only be cleared by a power cycle or software reset.
            External clock range is DC to 50 MHz. The frequency is calculated as:
            <code>refresh rate = external clock / (4096 * (prescale + 1))</code>
            </para>
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode1Bits.Restart">
            <summary>
            Enables or disables the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.SubAddress2"/>
            </summary>
            <remarks>
            Reading shows the state of restart logic.
            Write 1 to this bit to clear it. Writing 0 has no effect.
            </remarks>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode2Bits">
            <summary>
            Bitmask for the <see cref="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Register.Mode1"/> register.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode2Bits.None">
            <summary>
            No bits set.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode2Bits.OutputActiveLow0">
            <summary>
            Active low output enable (OUTNE) bit 0.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode2Bits.OutputActiveLow1">
            <summary>
            Active low output enable (OUTNE) bit 1.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode2Bits.OutputDrive">
            <summary>
            Selects the LED drive mode.
            </summary>
            <remarks>
            When set, the 16 LED# outputs are configured with a totem pole structure.
            When cleared, the 16 LED# outputs are configured with an open-drain structure.
            Power on default is set.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode2Bits.OutputChange">
            <summary>
            Selects the output change mode.
            </summary>
            <remarks>
            <para>
            When set, outputs change on ACK. Update on ACK requires all 4 PWM channel registers
            to be loaded before outputs will change on the last ACK.
            </para>
            <para>
            When cleared, outputs change on STOP. Change of the outputs at the STOP command allows
            synchronizing outputs of more than one PCA9685. Applicable to registers from
            06h (LED0_ON_L) to 45h (LED15_OFF_H) only. 1 or more registers can be written,
            in any order, before STOP.
            </para>
            <para>
            Power on default is cleared.
            </para>
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Components.Pca9685.Pca9685Mode2Bits.OutputInvert">
            <summary>
            Inverts output when OE set.
            Sets the value to use when an external driver is used.
            </summary>
            <remarks>
            <para>
            Normal LEDs can be driven directly in either mode. Some newer LEDs include integrated
            Zener diodes to limit voltage transients, reduce EMI, protect the LEDs and these must be
            driven only in the open-drain mode to prevent overheating the IC.
            </para>
            <para>
            Power on reset default state of LED# output pins is LOW and this option is not enabled.
            </para>
            </remarks>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Protocols.Barometer.BarometerMeasurement">
            <summary>
            Contains a (pressure and temperature) measurement of a barometer.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Barometer.BarometerMeasurement.#ctor(System.Double,System.Double)">
            <summary>
            Creates an instance with the specified values.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Barometer.BarometerMeasurement.op_Equality(Emlid.WindowsIot.Hardware.Protocols.Barometer.BarometerMeasurement,Emlid.WindowsIot.Hardware.Protocols.Barometer.BarometerMeasurement)">
            <summary>
            Tests two objects of this type for equality by value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Barometer.BarometerMeasurement.op_Inequality(Emlid.WindowsIot.Hardware.Protocols.Barometer.BarometerMeasurement,Emlid.WindowsIot.Hardware.Protocols.Barometer.BarometerMeasurement)">
            <summary>
            Tests two objects of this type for inequality by value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Barometer.BarometerMeasurement.Equals(System.Object)">
            <summary>
            Compares this object with another by value.
            </summary>
            <param name="value">Object with which to compare by value.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Barometer.BarometerMeasurement.Equals(Emlid.WindowsIot.Hardware.Protocols.Barometer.BarometerMeasurement)">
            <summary>
            Compares this object with another of the same type by value.
            </summary>
            <param name="value">Object with which to compare by value.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Barometer.BarometerMeasurement.GetHashCode">
            <summary>
            Returns a hash-code based on the current value of this object.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Barometer.BarometerMeasurement.Pressure">
            <summary>
            Pressure in millibars.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Barometer.BarometerMeasurement.Temperature">
            <summary>
            Temperature in celsius.
            </summary>
            <remarks>
            The temperature will be higher than outside because
            it is heated by other components.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Barometer.BarometerMeasurement.ToString">
            <summary>
            Returns a string representation of the current contents,
            e.g. "Pressure: 1013.43155085426mbar Temperature:36.3892484283447°c".
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Protocols.Ppm.CppmDecoder">
            <summary>
            PPM decoder for the CPPM protocol.
            </summary>
            <remarks>
            <para>
            A complete CPPM frame is about 22.5 ms (can vary between manufacturer).
            Signal low state is about 0.3 ms but sometimes a bit longer (<see cref="F:Emlid.WindowsIot.Hardware.Protocols.Ppm.CppmDecoder.LowLimit"/>).
            It begins with a start pulse (state high for more than 2 ms <see cref="F:Emlid.WindowsIot.Hardware.Protocols.Ppm.CppmDecoder.SyncLengthMinimum"/>).
            Each channel (up to 8) is encoded by the time of the high state
            (CPPM high state + 0.3 x (PPM low state) = servo PPM pulse width).
            </para>
            See https://en.wikipedia.org/wiki/Pulse-position_modulation for more information.
            </remarks>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Protocols.Ppm.CppmDecoder.ChannelCount">
            <summary>
            Number of channels in a standard CPPM frame.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Protocols.Ppm.CppmDecoder.SyncLengthMinimum">
            <summary>
            Minimum sync (PPM cycle) length in microseconds.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Protocols.Ppm.CppmDecoder.LowLimit">
            <summary>
            Maximum time in microseconds which a PPM signal may be low before it is considered invalid for CPPM.
            </summary>
            <remarks>
            Some specifications state 0.3ms is expected, but 0.4-0.5ms has been observed.
            We also add a bit more time for inaccuracies and differences between manufacturers.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.CppmDecoder.#ctor">
            <summary>
            Creates an instance.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Protocols.Ppm.CppmDecoder._channel">
            <summary>
            Indicates the decoder is currently processing a channel (when not null)
            and the index of the channel.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Protocols.Ppm.CppmDecoder._frame">
            <summary>
            Current CPPM frame being decoded.
            </summary>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Protocols.Ppm.CppmDecoder._cycle">
            <summary>
            Current CPPM cycle being decoded.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Ppm.CppmDecoder.MaximumChannels">
            <summary>
            Maximum number of channels which this decoder produces.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.CppmDecoder.DecodePulse(System.Collections.Concurrent.ConcurrentQueue{Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmPulse},System.Threading.AutoResetEvent,System.Collections.Concurrent.ConcurrentQueue{Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame},System.Threading.AutoResetEvent,System.Threading.CancellationToken)">
            <summary>
            Runs the decoder thread.
            </summary>
            <param name="inputBuffer">Buffer from which new PPM values are read.</param>
            <param name="inputTrigger">Trigger which is fired by the caller when new data arrives.</param>
            <param name="outputBuffer">Buffer into which decoded PPM frames are written.</param>
            <param name="outputTrigger">Trigger which is fired by this decoder when new data has been decoded.</param>
            <param name="stop">Signals when the decoder should stop.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.CppmDecoder.DecodeCycle(Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle)">
            <summary>
            Decodes the incoming PPM signal (each complete cycle) using the CPPM protocol.
            </summary>
            <param name="cycle">PPM cycle to decode.</param>
            <returns>
            <see cref="T:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame"/> when complete else null whilst decoding or skipping invalid cycles.
            </returns>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmPulse">
            <summary>
            Contains information about a PPM (Pulse Position Modulation) pulse (time and logic level).
            </summary>
            <see href="https://en.wikipedia.org/wiki/Pulse-position_modulation"/>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmPulse.#ctor(System.Int64,System.Boolean)">
            <summary>
            Creates an instance with the specified values.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmPulse.op_Equality(Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmPulse,Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmPulse)">
            <summary>
            Tests two objects of this type for equality by value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmPulse.op_Inequality(Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmPulse,Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmPulse)">
            <summary>
            Tests two objects of this type for inequality by value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmPulse.Equals(System.Object)">
            <summary>
            Compares this object with another by value.
            </summary>
            <param name="value">Object with which to compare by value.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmPulse.GetHashCode">
            <summary>
            Returns a hash-code based on the current value of this object.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmPulse.Time">
            <summary>
            Time at which the event occurred in microseconds.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmPulse.Level">
            <summary>
            Logic level of the pin (true when high/1, false when low/0).
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmPulse.ToString">
            <summary>
            Return a string representation of the current values.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle">
            <summary>
            Contains information about a PPM cycle (low-high pulse cycle)
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle.#ctor(System.Int64)">
            <summary>
            Creates an almost empty instance, with only the initial start (low) time.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Sets values with <see cref="P:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle.LowLength"/> calculated automatically.
            </summary>
            <param name="lowTime">Low time in microseconds.</param>
            <param name="highTime">High time in microseconds.</param>
            <param name="highLength">High length in microseconds.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle.op_Equality(Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle,Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle)">
            <summary>
            Tests two objects of this type for equality by value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle.op_Inequality(Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle,Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle)">
            <summary>
            Tests two objects of this type for inequality by value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle.Equals(System.Object)">
            <summary>
            Compares this object with another by value.
            </summary>
            <param name="value">Object with which to compare by value.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle.GetHashCode">
            <summary>
            Returns a hash-code based on the current value of this object.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle.LowTime">
            <summary>
            Timestamp of the low transition in microseconds.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle.LowLength">
            <summary>
            Length of time remained low time in microseconds.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle.HighTime">
            <summary>
            Timestamp of the high transition in microseconds.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle.HighLength">
            <summary>
            Length of the time remained high in microseconds.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle.Length">
            <summary>
            Total length of the cycle in microseconds.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle.IsValid">
            <summary>
            Checks if the cycle is valid.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle.Copy(Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle)">
            <summary>
            Copies values from another instance.
            </summary>
            <param name="source">Source from which to copy values.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmCycle.ToString">
            <summary>
            Return a string representation of the current values.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame">
            <summary>
            PPM frame data, a sequence of one or more PPM values sent together at a time.
            </summary>
            <remarks>
            Used as a standard variable container for both "PPM" (single channel) and other
            multi-channel protocols such as CPPM (a.k.a. PPM-Sum).
            The value of each channel depends on the protocol, i.e. what the start and end
            PPM lengths are and polarity (high or low as delimiter).
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame.#ctor(System.Int64,System.Int32[])">
            <summary>
            Creates an instance using the specified data.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame.op_Equality(Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame,Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame)">
            <summary>
            Tests two objects of this type for equality by value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame.op_Inequality(Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame,Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame)">
            <summary>
            Tests two objects of this type for inequality by value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame.Equals(System.Object)">
            <summary>
            Compares this object with another by value.
            </summary>
            <param name="value">Object with which to compare by value.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame.GetHashCode">
            <summary>
            Returns a hash-code based on the current value of this object.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame.Time">
            <summary>
            Timestamp in microseconds, when the frame was captured.
            </summary>
            <remarks>
            Does not necessarily relate to any actual date and time,
            because the source is a high resolution timer,
            not the system clock.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame.Channels">
            <summary>
            Channel values in microseconds.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame.ToString">
            <summary>
            Return a string representation of the current values.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Protocols.Ppm.IPpmDecoder">
            <summary>
            Defines a common PPM decoder interface to support multiple protocols.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Ppm.IPpmDecoder.MaximumChannels">
            <summary>
            Maximum number of channels which this decoder produces.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Ppm.IPpmDecoder.DecodePulse(System.Collections.Concurrent.ConcurrentQueue{Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmPulse},System.Threading.AutoResetEvent,System.Collections.Concurrent.ConcurrentQueue{Emlid.WindowsIot.Hardware.Protocols.Ppm.PpmFrame},System.Threading.AutoResetEvent,System.Threading.CancellationToken)">
            <summary>
            Runs the decoder thread.
            </summary>
            <param name="inputBuffer">Buffer from which new PPM values are read.</param>
            <param name="inputTrigger">Trigger which is fired by the caller when new data arrives.</param>
            <param name="outputBuffer">Buffer into which decoded PPM frames are written.</param>
            <param name="outputTrigger">Trigger which is fired by this decoder when new data has been decoded.</param>
            <param name="stop">Signals when the decoder should stop.</param>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse">
            <summary>
            Contains information about a PWM (Pulse Width Modulation) pulse (length and polarity).
            </summary>
            <see href="https://en.wikipedia.org/wiki/Pulse-width_modulation"/>
            <see href="https://www.oscium.com/sites/default/files/wipry-combo/Final,%2520Tutorial%2520on%2520Pulse%2520Width%2520and%2520Duty%2520Cycle.pdf"/>
        </member>
        <member name="F:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.ServoSafeFrequency">
            <summary>
            Frequency in Hz which many analog servos support.
            </summary>
            <remarks>
            Always check the specification of your servo before enabling output to avoid damage!
            Digital servos are capable of frequencies over 100Hz, some between 300-400Hz and higher.
            Some analog servos may even have trouble with 50Hz, but as most other autopilots
            are using 50Hz are default we choose this as an acceptable default.
            </remarks>
            <see href="http://pcbheaven.com/wikipages/How_RC_Servos_Works/"/>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.op_Equality(Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse,Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse)">
            <summary>
            Tests two objects of this type for equality by value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.op_Inequality(Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse,Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse)">
            <summary>
            Tests two objects of this type for inequality by value.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.Equals(System.Object)">
            <summary>
            Compares this object with another by value.
            </summary>
            <param name="value">Object with which to compare by value.</param>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.GetHashCode">
            <summary>
            Returns a hash-code based on the current value of this object.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.Frequency">
            <summary>
            Pulse Repetition Frequency (PRF) in Hz.
            </summary>
            <remarks>
            <para>
            Setting this value calculates <see cref="P:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.DutyCycle"/>.
            </para>
            <para>
            Some PWM devices do not tolerate high values and could be damaged if this is set too high,
            e.g. analog servos operate at much lower frequencies than digital servos.
            See <see cref="F:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.ServoSafeFrequency"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.Interval">
            <summary>
            Pulse Repetition Interval (PRI) in milliseconds.
            </summary>
            <remarks>
            The time between sequential pulses, from the beginning of one pulse to the next.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.Width">
            <summary>
            Pulse Width (PW) in fractions of a millisecond.
            </summary>
            <remarks>
            Cannot be greater than <see cref="P:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.Frequency"/>.
            Setting this value calculates <see cref="P:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.DutyCycle"/>.
            </remarks>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.DutyCycle">
            <summary>
            Duty cycle, the percentage of <see cref="P:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.Width"/> over <see cref="P:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.Frequency"/>.
            </summary>
            <remarks>
            Setting this value calculates <see cref="P:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.Width"/>.
            </remarks>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.FromWidth(System.Int32,System.Decimal)">
            <summary>
            Creates a <see cref="T:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse"/> from frequency and width.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.FromDutyCycle(System.Int32,System.Decimal)">
            <summary>
            Creates a <see cref="T:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse"/> from frequency and duty cycle.
            </summary>
        </member>
        <member name="M:Emlid.WindowsIot.Hardware.Protocols.Pwm.PwmPulse.ToString">
            <summary>
            Return a string representation of the current values.
            </summary>
        </member>
        <member name="T:Emlid.WindowsIot.Hardware.Resources.Strings">
            <summary>
            Strings.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Resources.Strings.GpioErrorDeviceNotFound">
            <summary>
            0 = pin, 1 = controller index.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Resources.Strings.I2cErrorDeviceNotFound">
            <summary>
            0 = address, 1 = controller index.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Resources.Strings.MS5611MeasurementStringFormat">
            <summary>
            0 = pressure, 1 = temperature.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Resources.Strings.NavioRCInputDecoderChannelOverflow">
            <summary>
            0 = # channels, 1 = maximum channels.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Resources.Strings.PpmCycleFormat">
            <summary>
            0 = low time, 1 = low length, 2 = high time, 3 = high length, 4 = total length.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Resources.Strings.PpmFrameFormatChannel">
            <summary>
            0 = channel, 1 = value.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Resources.Strings.PpmFrameFormatStart">
            <summary>
            0 = time.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Resources.Strings.PpmPulseFormat">
            <summary>
            0 = level, 1 = time.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Resources.Strings.BarometerMeasurementStringFormat">
            <summary>
            0 = pressure, 1 = temperature.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Resources.Strings.PwmPulseFormat">
            <summary>
            0 = width, 1 = length, 2 = percent.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Resources.Strings.SpiErrorDeviceNotFound">
            <summary>
            0 = CSL, 1 = controller index.
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Resources.Strings.Px4ioPacketCorruptReceive">
            <summary>
            
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Resources.Strings.Px4ioPacketCorruptTransmit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Emlid.WindowsIot.Hardware.Resources.Strings.Px4ioPacketError">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
